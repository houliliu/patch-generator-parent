/**
 * Copyright &copy; 2018
 * <a href="https://gitee.com/hackempire/patch-generator-desk">patch-generator-desk</a>
 * All rights reserved.
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mozi.patch.generator.desk;

import java.awt.*;
import java.io.*;
import java.net.URL;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.*;

import javax.swing.*;
import javax.swing.filechooser.FileFilter;
import javax.swing.table.DefaultTableModel;

import org.apache.commons.collections.CollectionUtils;
import org.apache.commons.lang.StringUtils;
import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.XMLWriter;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.mozi.patch.generator.GeneratePatchExecutor;
import com.mozi.patch.generator.desk.Enum.AnalysisTypeEnum;
import com.mozi.patch.generator.desk.Enum.DependLevelEnum;
import com.mozi.patch.generator.desk.utils.*;
import com.mozi.patch.generator.entity.*;
import com.mozi.patch.generator.enums.GenTypeEnum;
import com.mozi.patch.generator.enums.ProjectTypeEnum;
import com.mozi.patch.generator.enums.VersionManagerTypeEnum;

/**
 * 桌面增量打包神器主代码
 * @author Aaron
 */
public class GeneratorMainJFrame extends JFrame {

    /**
     * Creates new form GeneratorMainJFrame
     */
    public GeneratorMainJFrame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        SVNLOGPROJECTTYPEbuttonGroup = new ButtonGroup();
        GITLOGPROJECTTYPEbuttonGroup = new ButtonGroup();
        GITSERVERPROJECTTYPEbuttonGroup = new ButtonGroup();
        SVNSERVERPROJECTTYPEbuttonGroup = new ButtonGroup();
        MVNPOMANALYSISbuttonGroup = new ButtonGroup();
        MVNPOMDEPENDLEVELbuttonGroup = new ButtonGroup();
        PatchjTabbedPane = new JTabbedPane();
        GITSERVERjScrollPane = new JScrollPane();
        GITSERVERjPanel = new JPanel();
        GITSERVERPROJECTNAMEjLabel = new JLabel();
        GITSERVERPROJECTNAMEjTextField = new JTextField();
        GITSERVERPROJECTjLabel = new JLabel();
        GITSERVERPROJECTPATHjTextField = new JTextField();
        GITSERVERPROJECTjButton = new JButton();
        GITSERVERPATHjLabel = new JLabel();
        GITSERVERPATHjTextField = new JTextField();
        GITSERVERPATHjButton = new JButton();
        GITSERVEROUTPUTjLabel = new JLabel();
        GITSERVEROUTPUTjTextField = new JTextField();
        GITSERVEROUTPUTjButton = new JButton();
        GITSERVERPROJECTTYPEjLabel = new JLabel();
        GITSERVERPROJECTSINGLEjRadioButton = new JRadioButton();
        GITSERVERPROJECTMUTILjRadioButton = new JRadioButton();
        GITSERVERTABELjScrollPane = new JScrollPane();
        GITSERVERSOURCEMAPPERjTable = new JTable();
        GITSERVERADDjButton = new JButton();
        GITSERVERDELjButton = new JButton();
        GITSERVERSAVECONFIGjButton = new JButton();
        GITSERVEROUTPACKjButton = new JButton();
        GITSERVERVERSIONjLabel = new JLabel();
        GITSERVERVERSIONENDjTextField = new JTextField();
        GITSERVERVERSIONSTARTjTextField = new JTextField();
        GITSERVERVERSIONCENTERjLabel = new JLabel();
        GITSERVERPROJECTCONFIGjButton = new JButton();
        SVNSERVERjScrollPane = new JScrollPane();
        SVNSERVERjPanel = new JPanel();
        SVNSERVERPROJECTNAMEjLabel = new JLabel();
        SVNSERVERPROJECTNAMEjTextField = new JTextField();
        SVNSERVERPROJECTjLabel = new JLabel();
        SVNSERVERPROJECTPATHjTextField = new JTextField();
        SVNSERVERPATHjLabel = new JLabel();
        SVNSERVERPATHjTextField = new JTextField();
        SVNSERVEROUTPUTjLabel = new JLabel();
        SVNSERVEROUTPUTjTextField = new JTextField();
        SVNSERVERPROJECTjButton = new JButton();
        SVNSERVEROUTPUTjButton = new JButton();
        SVNSERVERPROJECTTYPEjLabel = new JLabel();
        SVNSERVERPROJECTSINGLEjRadioButton = new JRadioButton();
        SVNSERVERPROJECTMUTILjRadioButton = new JRadioButton();
        SVNSERVERVERSIONjLabel = new JLabel();
        SVNSERVERVERSIONSTARTjTextField = new JTextField();
        SVNSERVERTABELjScrollPane = new JScrollPane();
        SVNSERVERSOURCEMAPPERjTable = new JTable();
        SVNSERVERADDjButton = new JButton();
        SVNSERVERDELjButton = new JButton();
        SVNSERVERSAVECONFIGjButton = new JButton();
        SVNSERVEROUTPACKjButton = new JButton();
        SVNSERVEREXCLUDEjLabel = new JLabel();
        SVNSERVERVERSIONCENTERjLabel = new JLabel();
        SVNSERVERVERSIONENDjTextField = new JTextField();
        SVNSERVERACOUNTjLabel = new JLabel();
        SVNSERVERPWDjLabel = new JLabel();
        SVNSERVERREVISEjTextField = new JTextField();
        SVNSERVERACOUNTjTextField = new JTextField();
        SVNSERVERREVISEPATHjLabel = new JLabel();
        SVNSERVEREXCLUDEjTextField = new JTextField();
        SVNSERVERPROJECTCONFIGjButton = new JButton();
        SVNSERVERPWDjPasswordField = new JPasswordField();
        GITLOGjScrollPane = new JScrollPane();
        GITLOGjPanel = new JPanel();
        GITLOGPROJECTNAMEjLabel = new JLabel();
        GITLOGPROJECTNAMEjTextField = new JTextField();
        GITLOGPROJECTjLabel = new JLabel();
        GITLOGPROJECTPATHjTextField = new JTextField();
        GITLOGPROJECTjButton = new JButton();
        GITLOGPATHjLabel = new JLabel();
        GITLOGPATHjTextField = new JTextField();
        GITLOGPATHjButton = new JButton();
        GITLOGOUTPUTjLabel = new JLabel();
        GITLOGOUTPUTjTextField = new JTextField();
        GITLOGOUTPUTjButton = new JButton();
        GITLOGPROJECTTYPEjLabel = new JLabel();
        GITLOGPROJECTSINGLEjRadioButton = new JRadioButton();
        GITLOGPROJECTMUTILjRadioButton = new JRadioButton();
        GITLOGTABELjScrollPane = new JScrollPane();
        GITLOGSOURCEMAPPERjTable = new JTable();
        GITLOGADDjButton = new JButton();
        GITLOGDELjButton = new JButton();
        GITLOGSAVECONFIGjButton = new JButton();
        GITLOGOUTPACKjButton = new JButton();
        GITLOGPROJECTCONFIGjButton = new JButton();
        SVNLOGjScrollPane = new JScrollPane();
        SVNLOGjPanel = new JPanel();
        SVNLOGPATHjLabel = new JLabel();
        SVNLOGPATHjTextField = new JTextField();
        SVNLOGPROJECTjLabel = new JLabel();
        SVNLOGPROJECTPATHjTextField = new JTextField();
        SVNLOGPROJECTNAMEjLabel = new JLabel();
        SVNLOGPROJECTNAMEjTextField = new JTextField();
        SVNLOGOUTPUTjLabel = new JLabel();
        SVNLOGOUTPUTjTextField = new JTextField();
        SVNLOGPROJECTjButton = new JButton();
        SVNLOGPATHjButton = new JButton();
        SVNLOGOUTPUTjButton = new JButton();
        SVNLOGOUTPACKjButton = new JButton();
        SVNLOGTABELjScrollPane = new JScrollPane();
        SVNLOGSOURCEMAPPERjTable = new JTable();
        SVNLOGADDjButton = new JButton();
        SVNLOGDELjButton = new JButton();
        SVNLOGPROJECTSINGLEjRadioButton = new JRadioButton();
        SVNLOGPROJECTTYPEjLabel = new JLabel();
        SVNLOGPROJECTMUTILjRadioButton = new JRadioButton();
        SVNLOGSAVECONFIGjButton = new JButton();
        SVNLOGPROJECTCONFIGjButton = new JButton();
        MVNjScrollPane = new JScrollPane();
        readmejScrollPane = new JScrollPane();
        MVNPOMANALYSISjPanel = new JPanel();
        MVNPOMNEWPATHjLabel = new JLabel();
        MVNPOMNEWPATHjTextField = new JTextField();
        MVNPOMANALYSISNAMEPROJECTNAMEjLabel = new JLabel();
        MVNPOMANALYSISNAMEPROJECTNAMEjTextField = new JTextField();
        MVNPOMANALYSISOUTPUTjLabel = new JLabel();
        MVNPOMANALYSISOUTPUTjTextField = new JTextField();
        MVNPOMOLDPATHjButton = new JButton();
        MVNPOMANALYSISOUTPUTjButton = new JButton();
        MVNPOMANALYSISOUTPACKjButton = new JButton();
        MVNPOMCOMPLETEANALYSISjRadioButton = new JRadioButton();
        MVNPOMDEPENDLEVELjLabel = new JLabel();
        MVNPOMDIFFANALYSISjRadioButton = new JRadioButton();
        MVNPOMANALYSISCONFIGjButton = new JButton();
        MVNPOMANALYSISCTCONFIGjButton = new JButton();
        MVNPOMANALYSISNAMEjTextField = new JTextField();
        MVNPOMANALYSISNAMEjLabel = new JLabel();
        MVNPOMOLDPATHjLabel = new JLabel();
        MVNPOMOLDPATHjTextField = new JTextField();
        MVNPOMNEWPATHjButton = new JButton();
        MVNPOMANALYSISTYPEjLabel1 = new JLabel();
        MVNPOMTESTjRadioButton = new JRadioButton();
        MVNPOMSYSTEMjRadioButton = new JRadioButton();
        MVNPOMCOMPILEjRadioButton = new JRadioButton();
        MVNPOMRUNTIMEjRadioButton = new JRadioButton();
        MVNPOMPROVIDEDjRadioButton = new JRadioButton();
        CONSOLEtextArea = new TextArea();
        CONSOLEjLabel = new JLabel();
        globalConsolejScrollPane = new JScrollPane();
        globalConsolejTextPane = new JTextPane();
        globalConsoleClearjButton = new JButton();
        PROJECTADDRESSjLabel = new JLabel();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        setTitle("mozi全自动打包工具");
        setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        setIconImage(Toolkit.getDefaultToolkit().getImage("favicon-20180430115456304.ico"));
        setLocation(new Point(0, 0));
        setName("mainframe"); // NOI18N
        setResizable(false);
        setSize(new Dimension(300, 200));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GITSERVERjScrollPane.setPreferredSize(new Dimension(0, 0));

        GITSERVERjPanel.setPreferredSize(new Dimension(0, 0));
        GITSERVERjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GITSERVERPROJECTNAMEjLabel.setText("项目名称");
        GITSERVERjPanel.add(GITSERVERPROJECTNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 20));

        GITSERVERPROJECTNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVERPROJECTNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 420, 20));

        GITSERVERPROJECTjLabel.setText("项目路径");
        GITSERVERjPanel.add(GITSERVERPROJECTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        GITSERVERPROJECTPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVERPROJECTPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 420, 20));

        GITSERVERPROJECTjButton.setText("浏览");
        GITSERVERPROJECTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERPROJECTjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERPROJECTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, 20));

        GITSERVERPATHjLabel.setText("GIT本地URL路径");
        GITSERVERjPanel.add(GITSERVERPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 81, 90, 20));

        GITSERVERPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVERPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 420, 20));

        GITSERVERPATHjButton.setText("浏览");
        GITSERVERPATHjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERPATHjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERPATHjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, 20));

        GITSERVEROUTPUTjLabel.setText("输出目录");
        GITSERVERjPanel.add(GITSERVEROUTPUTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 50, 23));

        GITSERVEROUTPUTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVEROUTPUTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 420, 20));

        GITSERVEROUTPUTjButton.setText("浏览");
        GITSERVEROUTPUTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVEROUTPUTjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVEROUTPUTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, 20));

        GITSERVERPROJECTTYPEjLabel.setText("项目类型");
        GITSERVERjPanel.add(GITSERVERPROJECTTYPEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, 20));

        GITSERVERPROJECTTYPEbuttonGroup.add(GITSERVERPROJECTSINGLEjRadioButton);
        GITSERVERPROJECTSINGLEjRadioButton.setSelected(true);
        GITSERVERPROJECTSINGLEjRadioButton.setText("单模块");
        GITSERVERjPanel.add(GITSERVERPROJECTSINGLEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, -1, -1));

        GITSERVERPROJECTTYPEbuttonGroup.add(GITSERVERPROJECTMUTILjRadioButton);
        GITSERVERPROJECTMUTILjRadioButton.setText("多模块");
        GITSERVERjPanel.add(GITSERVERPROJECTMUTILjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, -1, -1));

        GITSERVERTABELjScrollPane.setAutoscrolls(true);

        GITSERVERSOURCEMAPPERjTable.setModel(new DefaultTableModel(
                new Object[][]{
                        {"/src/main/java", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/resources", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/webapp", "src/main/webapp", null}
                },
                new String[]{
                        "sourceDir", "targetDir", "patchDir"
                }
        ) {
            Class[] types = new Class[]{
                    String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        GITSERVERSOURCEMAPPERjTable.setDragEnabled(true);
        GITSERVERSOURCEMAPPERjTable.setSelectionBackground(new Color(204, 255, 204));
        GITSERVERSOURCEMAPPERjTable.setSelectionForeground(new Color(0, 0, 0));
        GITSERVERTABELjScrollPane.setViewportView(GITSERVERSOURCEMAPPERjTable);

        GITSERVERjPanel.add(GITSERVERTABELjScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 200, 530, 110));

        GITSERVERADDjButton.setText("新增");
        GITSERVERADDjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERADDjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERADDjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, 20));

        GITSERVERDELjButton.setText("删除");
        GITSERVERDELjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERDELjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERDELjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 230, -1, 20));

        GITSERVERSAVECONFIGjButton.setText("保存");
        GITSERVERSAVECONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERSAVECONFIGjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERSAVECONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, 20));

        GITSERVEROUTPACKjButton.setText("打包");
        GITSERVEROUTPACKjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVEROUTPACKjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVEROUTPACKjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 290, -1, 20));

        GITSERVERVERSIONjLabel.setText("GIT版本范围");
        GITSERVERjPanel.add(GITSERVERVERSIONjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 20));

        GITSERVERVERSIONENDjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVERVERSIONENDjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 90, 20));

        GITSERVERVERSIONSTARTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITSERVERjPanel.add(GITSERVERVERSIONSTARTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 90, 20));

        GITSERVERVERSIONCENTERjLabel.setHorizontalAlignment(SwingConstants.CENTER);
        GITSERVERVERSIONCENTERjLabel.setText("至");
        GITSERVERVERSIONCENTERjLabel.setAutoscrolls(true);
        GITSERVERVERSIONCENTERjLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        GITSERVERjPanel.add(GITSERVERVERSIONCENTERjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 20, 20));

        GITSERVERPROJECTCONFIGjButton.setText("配置");
        GITSERVERPROJECTCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITSERVERPROJECTCONFIGjButtonActionPerformed(evt);
            }
        });
        GITSERVERjPanel.add(GITSERVERPROJECTCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, 20));

        GITSERVERjScrollPane.setViewportView(GITSERVERjPanel);

        PatchjTabbedPane.addTab("GIT服务器增量", GITSERVERjScrollPane);

        SVNSERVERjScrollPane.setPreferredSize(new Dimension(0, 0));

        SVNSERVERjPanel.setPreferredSize(new Dimension(0, 0));
        SVNSERVERjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SVNSERVERPROJECTNAMEjLabel.setText("项目名称");
        SVNSERVERjPanel.add(SVNSERVERPROJECTNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 20));

        SVNSERVERPROJECTNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERPROJECTNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 420, 20));

        SVNSERVERPROJECTjLabel.setText("项目路径");
        SVNSERVERjPanel.add(SVNSERVERPROJECTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        SVNSERVERPROJECTPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERPROJECTPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 420, 20));

        SVNSERVERPATHjLabel.setText("SVNURL路径");
        SVNSERVERjPanel.add(SVNSERVERPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 81, 90, 20));

        SVNSERVERPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 420, 20));

        SVNSERVEROUTPUTjLabel.setText("输出目录");
        SVNSERVERjPanel.add(SVNSERVEROUTPUTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 50, 23));

        SVNSERVEROUTPUTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVEROUTPUTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 420, 20));

        SVNSERVERPROJECTjButton.setText("浏览");
        SVNSERVERPROJECTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVERPROJECTjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVERPROJECTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, 20));

        SVNSERVEROUTPUTjButton.setText("浏览");
        SVNSERVEROUTPUTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVEROUTPUTjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVEROUTPUTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, 20));

        SVNSERVERPROJECTTYPEjLabel.setText("项目类型");
        SVNSERVERjPanel.add(SVNSERVERPROJECTTYPEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, 20));

        SVNSERVERPROJECTTYPEbuttonGroup.add(SVNSERVERPROJECTSINGLEjRadioButton);
        SVNSERVERPROJECTSINGLEjRadioButton.setSelected(true);
        SVNSERVERPROJECTSINGLEjRadioButton.setText("单模块");
        SVNSERVERjPanel.add(SVNSERVERPROJECTSINGLEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, -1, -1));

        SVNSERVERPROJECTTYPEbuttonGroup.add(SVNSERVERPROJECTMUTILjRadioButton);
        SVNSERVERPROJECTMUTILjRadioButton.setText("多模块");
        SVNSERVERjPanel.add(SVNSERVERPROJECTMUTILjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, -1, -1));

        SVNSERVERVERSIONjLabel.setText("SVN版本范围");
        SVNSERVERjPanel.add(SVNSERVERVERSIONjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, -1, 20));

        SVNSERVERVERSIONSTARTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERVERSIONSTARTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 90, 20));

        SVNSERVERTABELjScrollPane.setAutoscrolls(true);

        SVNSERVERSOURCEMAPPERjTable.setModel(new DefaultTableModel(
                new Object[][]{
                        {"/src/main/java", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/resources", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/webapp", "src/main/webapp", null}
                },
                new String[]{
                        "sourceDir", "targetDir", "patchDir"
                }
        ) {
            Class[] types = new Class[]{
                    String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        SVNSERVERSOURCEMAPPERjTable.setDragEnabled(true);
        SVNSERVERSOURCEMAPPERjTable.setSelectionBackground(new Color(204, 255, 204));
        SVNSERVERSOURCEMAPPERjTable.setSelectionForeground(new Color(0, 0, 0));
        SVNSERVERSOURCEMAPPERjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SVNSERVERSOURCEMAPPERjTableMouseClicked(evt);
            }
        });
        SVNSERVERTABELjScrollPane.setViewportView(SVNSERVERSOURCEMAPPERjTable);

        SVNSERVERjPanel.add(SVNSERVERTABELjScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 230, 530, 110));

        SVNSERVERADDjButton.setText("新增");
        SVNSERVERADDjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVERADDjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVERADDjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 230, -1, 20));

        SVNSERVERDELjButton.setText("删除");
        SVNSERVERDELjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVERDELjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVERDELjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, 20));

        SVNSERVERSAVECONFIGjButton.setText("保存");
        SVNSERVERSAVECONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVERSAVECONFIGjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVERSAVECONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 290, -1, 20));

        SVNSERVEROUTPACKjButton.setText("打包");
        SVNSERVEROUTPACKjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVEROUTPACKjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVEROUTPACKjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 320, -1, 20));

        SVNSERVEREXCLUDEjLabel.setText("排除版本");
        SVNSERVERjPanel.add(SVNSERVEREXCLUDEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 170, -1, 20));

        SVNSERVERVERSIONCENTERjLabel.setHorizontalAlignment(SwingConstants.CENTER);
        SVNSERVERVERSIONCENTERjLabel.setText("至");
        SVNSERVERVERSIONCENTERjLabel.setHorizontalTextPosition(SwingConstants.CENTER);
        SVNSERVERjPanel.add(SVNSERVERVERSIONCENTERjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 170, 20, 20));

        SVNSERVERVERSIONENDjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERVERSIONENDjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 90, 20));

        SVNSERVERACOUNTjLabel.setText("SVN账户");
        SVNSERVERjPanel.add(SVNSERVERACOUNTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, -1, -1));

        SVNSERVERPWDjLabel.setText("密码");
        SVNSERVERjPanel.add(SVNSERVERPWDjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 200, -1, -1));

        SVNSERVERREVISEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERREVISEjTextField.setToolTipText("");
        SVNSERVERREVISEjTextField.setName(""); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERREVISEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 140, 140, 20));

        SVNSERVERACOUNTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVERACOUNTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 200, 20));

        SVNSERVERREVISEPATHjLabel.setText("修正路径");
        SVNSERVERjPanel.add(SVNSERVERREVISEPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 140, -1, 20));

        SVNSERVEREXCLUDEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNSERVERjPanel.add(SVNSERVEREXCLUDEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 170, 140, 20));

        SVNSERVERPROJECTCONFIGjButton.setText("配置");
        SVNSERVERPROJECTCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNSERVERPROJECTCONFIGjButtonActionPerformed(evt);
            }
        });
        SVNSERVERjPanel.add(SVNSERVERPROJECTCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, 20));
        SVNSERVERjPanel.add(SVNSERVERPWDjPasswordField, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 200, 140, 20));

        SVNSERVERjScrollPane.setViewportView(SVNSERVERjPanel);

        PatchjTabbedPane.addTab("SVN服务器增量", SVNSERVERjScrollPane);

        GITLOGjScrollPane.setPreferredSize(new Dimension(0, 0));

        GITLOGjPanel.setPreferredSize(new Dimension(0, 0));
        GITLOGjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        GITLOGPROJECTNAMEjLabel.setText("项目名称");
        GITLOGjPanel.add(GITLOGPROJECTNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 20));

        GITLOGPROJECTNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITLOGjPanel.add(GITLOGPROJECTNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 420, 20));

        GITLOGPROJECTjLabel.setText("项目路径");
        GITLOGjPanel.add(GITLOGPROJECTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        GITLOGPROJECTPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITLOGjPanel.add(GITLOGPROJECTPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 420, 20));

        GITLOGPROJECTjButton.setText("浏览");
        GITLOGPROJECTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGPROJECTjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGPROJECTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, 20));

        GITLOGPATHjLabel.setText("GIT日志路径");
        GITLOGjPanel.add(GITLOGPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 81, 90, 20));

        GITLOGPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITLOGjPanel.add(GITLOGPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 420, 20));

        GITLOGPATHjButton.setText("浏览");
        GITLOGPATHjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGPATHjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGPATHjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, 20));

        GITLOGOUTPUTjLabel.setText("输出目录");
        GITLOGjPanel.add(GITLOGOUTPUTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 50, 23));

        GITLOGOUTPUTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        GITLOGjPanel.add(GITLOGOUTPUTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 420, 20));

        GITLOGOUTPUTjButton.setText("浏览");
        GITLOGOUTPUTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGOUTPUTjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGOUTPUTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, 20));

        GITLOGPROJECTTYPEjLabel.setText("项目类型");
        GITLOGjPanel.add(GITLOGPROJECTTYPEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, 20));

        GITLOGPROJECTTYPEbuttonGroup.add(GITLOGPROJECTSINGLEjRadioButton);
        GITLOGPROJECTSINGLEjRadioButton.setSelected(true);
        GITLOGPROJECTSINGLEjRadioButton.setText("单模块");
        GITLOGjPanel.add(GITLOGPROJECTSINGLEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, -1, -1));

        GITLOGPROJECTTYPEbuttonGroup.add(GITLOGPROJECTMUTILjRadioButton);
        GITLOGPROJECTMUTILjRadioButton.setText("多模块");
        GITLOGjPanel.add(GITLOGPROJECTMUTILjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, -1, -1));

        GITLOGTABELjScrollPane.setAutoscrolls(true);

        GITLOGSOURCEMAPPERjTable.setModel(new DefaultTableModel(
                new Object[][]{
                        {"/src/main/java", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/resources", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/webapp", "src/main/webapp", null}
                },
                new String[]{
                        "sourceDir", "targetDir", "patchDir"
                }
        ) {
            Class[] types = new Class[]{
                    String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        GITLOGSOURCEMAPPERjTable.setDoubleBuffered(true);
        GITLOGSOURCEMAPPERjTable.setSelectionBackground(new Color(204, 255, 204));
        GITLOGSOURCEMAPPERjTable.setSelectionForeground(new Color(0, 0, 0));
        GITLOGSOURCEMAPPERjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GITLOGSOURCEMAPPERjTableMouseClicked(evt);
            }
        });
        GITLOGTABELjScrollPane.setViewportView(GITLOGSOURCEMAPPERjTable);
        GITLOGSOURCEMAPPERjTable.getAccessibleContext().setAccessibleDescription("");

        GITLOGjPanel.add(GITLOGTABELjScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 530, 110));

        GITLOGADDjButton.setText("新增");
        GITLOGADDjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGADDjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGADDjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, 20));

        GITLOGDELjButton.setText("删除");
        GITLOGDELjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGDELjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGDELjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, 20));

        GITLOGSAVECONFIGjButton.setText("保存");
        GITLOGSAVECONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGSAVECONFIGjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGSAVECONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 230, -1, 20));

        GITLOGOUTPACKjButton.setText("打包");
        GITLOGOUTPACKjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGOUTPACKjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGOUTPACKjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, 20));

        GITLOGPROJECTCONFIGjButton.setText("配置");
        GITLOGPROJECTCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GITLOGPROJECTCONFIGjButtonActionPerformed(evt);
            }
        });
        GITLOGjPanel.add(GITLOGPROJECTCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, 20));

        GITLOGjScrollPane.setViewportView(GITLOGjPanel);

        PatchjTabbedPane.addTab("GIT日志增量", GITLOGjScrollPane);

        SVNLOGjScrollPane.setAutoscrolls(true);
        SVNLOGjScrollPane.setPreferredSize(new Dimension(0, 0));

        SVNLOGjPanel.setAutoscrolls(true);
        SVNLOGjPanel.setPreferredSize(new Dimension(0, 0));
        SVNLOGjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        SVNLOGPATHjLabel.setText("SVN日志路径");
        SVNLOGjPanel.add(SVNLOGPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 90, 22));

        SVNLOGPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNLOGjPanel.add(SVNLOGPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 420, 20));

        SVNLOGPROJECTjLabel.setText("项目路径");
        SVNLOGjPanel.add(SVNLOGPROJECTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, -1, 20));

        SVNLOGPROJECTPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNLOGjPanel.add(SVNLOGPROJECTPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 420, 20));

        SVNLOGPROJECTNAMEjLabel.setText("项目名称");
        SVNLOGjPanel.add(SVNLOGPROJECTNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 20));

        SVNLOGPROJECTNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNLOGjPanel.add(SVNLOGPROJECTNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 420, 20));

        SVNLOGOUTPUTjLabel.setText("输出目录");
        SVNLOGjPanel.add(SVNLOGOUTPUTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 50, 22));

        SVNLOGOUTPUTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        SVNLOGjPanel.add(SVNLOGOUTPUTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 420, 20));

        SVNLOGPROJECTjButton.setText("浏览");
        SVNLOGPROJECTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGPROJECTjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGPROJECTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 50, -1, 20));

        SVNLOGPATHjButton.setText("浏览");
        SVNLOGPATHjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGPATHjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGPATHjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, 20));

        SVNLOGOUTPUTjButton.setText("浏览");
        SVNLOGOUTPUTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGOUTPUTjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGOUTPUTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, 20));

        SVNLOGOUTPACKjButton.setText("打包");
        SVNLOGOUTPACKjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGOUTPACKjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGOUTPACKjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 260, -1, 20));

        SVNLOGSOURCEMAPPERjTable.setModel(new DefaultTableModel(
                new Object[][]{
                        {"/src/main/java", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/resources", "target/classes", "/WEB-INF/classes"},
                        {"/src/main/webapp", "src/main/webapp", null}
                },
                new String[]{
                        "sourceDir", "targetDir", "patchDir"
                }
        ) {
            Class[] types = new Class[]{
                    String.class, String.class, String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types[columnIndex];
            }
        });
        SVNLOGSOURCEMAPPERjTable.setDoubleBuffered(true);
        SVNLOGSOURCEMAPPERjTable.setSelectionBackground(new Color(204, 255, 204));
        SVNLOGSOURCEMAPPERjTable.setSelectionForeground(new Color(0, 0, 0));
        SVNLOGSOURCEMAPPERjTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SVNLOGSOURCEMAPPERjTableMouseClicked(evt);
            }
        });
        SVNLOGTABELjScrollPane.setViewportView(SVNLOGSOURCEMAPPERjTable);

        SVNLOGjPanel.add(SVNLOGTABELjScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 170, 530, 110));

        SVNLOGADDjButton.setText("新增");
        SVNLOGADDjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGADDjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGADDjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, 20));

        SVNLOGDELjButton.setText("删除");
        SVNLOGDELjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGDELjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGDELjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, 20));

        SVNLOGPROJECTTYPEbuttonGroup.add(SVNLOGPROJECTSINGLEjRadioButton);
        SVNLOGPROJECTSINGLEjRadioButton.setSelected(true);
        SVNLOGPROJECTSINGLEjRadioButton.setText("单模块");
        SVNLOGjPanel.add(SVNLOGPROJECTSINGLEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 70, -1));

        SVNLOGPROJECTTYPEjLabel.setText("项目类型");
        SVNLOGjPanel.add(SVNLOGPROJECTTYPEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, -1, 20));

        SVNLOGPROJECTTYPEbuttonGroup.add(SVNLOGPROJECTMUTILjRadioButton);
        SVNLOGPROJECTMUTILjRadioButton.setText("多模块");
        SVNLOGjPanel.add(SVNLOGPROJECTMUTILjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 140, 70, -1));

        SVNLOGSAVECONFIGjButton.setText("保存");
        SVNLOGSAVECONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGSAVECONFIGjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGSAVECONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 230, -1, 20));

        SVNLOGPROJECTCONFIGjButton.setText("配置");
        SVNLOGPROJECTCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SVNLOGPROJECTCONFIGjButtonActionPerformed(evt);
            }
        });
        SVNLOGjPanel.add(SVNLOGPROJECTCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, 20));

        SVNLOGjScrollPane.setViewportView(SVNLOGjPanel);

        PatchjTabbedPane.addTab("SVN日志增量", null, SVNLOGjScrollPane, "");
        SVNLOGjScrollPane.getAccessibleContext().setAccessibleName("");
        SVNLOGjScrollPane.getAccessibleContext().setAccessibleDescription("");

        MVNjScrollPane.setAutoscrolls(true);
        MVNjScrollPane.setPreferredSize(new Dimension(0, 0));

        MVNPOMANALYSISjPanel.setAutoscrolls(true);
        MVNPOMANALYSISjPanel.setPreferredSize(new Dimension(0, 0));
        MVNPOMANALYSISjPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        MVNPOMNEWPATHjLabel.setText("POM_NEW路径");
        MVNPOMANALYSISjPanel.add(MVNPOMNEWPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 90, 22));

        MVNPOMNEWPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        MVNPOMANALYSISjPanel.add(MVNPOMNEWPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 80, 420, 20));

        MVNPOMANALYSISNAMEPROJECTNAMEjLabel.setText("项目名称");
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISNAMEPROJECTNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 50, 20));

        MVNPOMANALYSISNAMEPROJECTNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISNAMEPROJECTNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 50, 420, 20));

        MVNPOMANALYSISOUTPUTjLabel.setText("输出目录");
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISOUTPUTjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 50, 22));

        MVNPOMANALYSISOUTPUTjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISOUTPUTjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 140, 420, 20));

        MVNPOMOLDPATHjButton.setText("浏览");
        MVNPOMOLDPATHjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMOLDPATHjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMOLDPATHjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 110, -1, 20));

        MVNPOMANALYSISOUTPUTjButton.setText("浏览");
        MVNPOMANALYSISOUTPUTjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMANALYSISOUTPUTjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISOUTPUTjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 140, -1, 20));

        MVNPOMANALYSISOUTPACKjButton.setText("打包");
        MVNPOMANALYSISOUTPACKjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMANALYSISOUTPACKjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISOUTPACKjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 200, -1, 20));

        MVNPOMANALYSISbuttonGroup.add(MVNPOMCOMPLETEANALYSISjRadioButton);
        MVNPOMCOMPLETEANALYSISjRadioButton.setSelected(true);
        MVNPOMCOMPLETEANALYSISjRadioButton.setLabel("完全分析");
        MVNPOMANALYSISjPanel.add(MVNPOMCOMPLETEANALYSISjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 170, 80, -1));

        MVNPOMDEPENDLEVELjLabel.setText("依赖级别");
        MVNPOMANALYSISjPanel.add(MVNPOMDEPENDLEVELjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 70, 20));
        MVNPOMDEPENDLEVELjLabel.getAccessibleContext().setAccessibleName("POM分析类型");

        MVNPOMANALYSISbuttonGroup.add(MVNPOMDIFFANALYSISjRadioButton);
        MVNPOMDIFFANALYSISjRadioButton.setText("差异分析");
        MVNPOMANALYSISjPanel.add(MVNPOMDIFFANALYSISjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 170, 80, -1));
        MVNPOMDIFFANALYSISjRadioButton.getAccessibleContext().setAccessibleName("完全分析");

        MVNPOMANALYSISCONFIGjButton.setText("保存");
        MVNPOMANALYSISCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMANALYSISCONFIGjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 170, -1, 20));

        MVNPOMANALYSISCTCONFIGjButton.setText("配置");
        MVNPOMANALYSISCTCONFIGjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMANALYSISCTCONFIGjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISCTCONFIGjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 20, -1, 20));

        MVNPOMANALYSISNAMEjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISNAMEjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 20, 420, 20));

        MVNPOMANALYSISNAMEjLabel.setText("分析名称");
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISNAMEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 20, 50, 20));

        MVNPOMOLDPATHjLabel.setText("POM_OLD路径");
        MVNPOMANALYSISjPanel.add(MVNPOMOLDPATHjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 90, 20));

        MVNPOMOLDPATHjTextField.setFont(new Font("幼圆", 0, 10)); // NOI18N
        MVNPOMANALYSISjPanel.add(MVNPOMOLDPATHjTextField, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 110, 420, 20));

        MVNPOMNEWPATHjButton.setText("浏览");
        MVNPOMNEWPATHjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MVNPOMNEWPATHjButtonActionPerformed(evt);
            }
        });
        MVNPOMANALYSISjPanel.add(MVNPOMNEWPATHjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 80, -1, 20));

        MVNPOMANALYSISTYPEjLabel1.setText("分析类型");
        MVNPOMANALYSISjPanel.add(MVNPOMANALYSISTYPEjLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 70, 20));

        MVNPOMDEPENDLEVELbuttonGroup.add(MVNPOMTESTjRadioButton);
        MVNPOMTESTjRadioButton.setText("test");
        MVNPOMANALYSISjPanel.add(MVNPOMTESTjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 200, 60, -1));

        MVNPOMDEPENDLEVELbuttonGroup.add(MVNPOMSYSTEMjRadioButton);
        MVNPOMSYSTEMjRadioButton.setText("system");
        MVNPOMSYSTEMjRadioButton.setEnabled(false);
        MVNPOMANALYSISjPanel.add(MVNPOMSYSTEMjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 200, 80, -1));

        MVNPOMDEPENDLEVELbuttonGroup.add(MVNPOMCOMPILEjRadioButton);
        MVNPOMCOMPILEjRadioButton.setSelected(true);
        MVNPOMCOMPILEjRadioButton.setText("compile");
        MVNPOMANALYSISjPanel.add(MVNPOMCOMPILEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 200, 80, -1));

        MVNPOMDEPENDLEVELbuttonGroup.add(MVNPOMRUNTIMEjRadioButton);
        MVNPOMRUNTIMEjRadioButton.setText("runtime");
        MVNPOMANALYSISjPanel.add(MVNPOMRUNTIMEjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 200, 80, -1));

        MVNPOMDEPENDLEVELbuttonGroup.add(MVNPOMPROVIDEDjRadioButton);
        MVNPOMPROVIDEDjRadioButton.setText("provided");
        MVNPOMANALYSISjPanel.add(MVNPOMPROVIDEDjRadioButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 200, 80, -1));

        MVNjScrollPane.setViewportView(MVNPOMANALYSISjPanel);

        PatchjTabbedPane.addTab("POM依赖分析", null, MVNjScrollPane, "");
        getContentPane().add(PatchjTabbedPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 620, 390));
        PatchjTabbedPane.getAccessibleContext().setAccessibleName("");
        PatchjTabbedPane.getAccessibleContext().setAccessibleDescription("");

        CONSOLEtextArea.setEditable(false);
        CONSOLEtextArea.setFont(new Font("Dialog", 1, 10)); // NOI18N
        CONSOLEtextArea.setVisible(false);
        getContentPane().add(CONSOLEtextArea, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 590, 620, 50));

        CONSOLEjLabel.setFont(new Font("宋体", 0, 10)); // NOI18N
        CONSOLEjLabel.setText("控制台");
        getContentPane().add(CONSOLEjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 390, -1, 20));

        globalConsolejTextPane.setDragEnabled(true);
        globalConsolejTextPane.setDropMode(DropMode.INSERT);
        globalConsolejScrollPane.setViewportView(globalConsolejTextPane);

        getContentPane().add(globalConsolejScrollPane, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 410, 620, 230));

        globalConsoleClearjButton.setText("清空");
        globalConsoleClearjButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                globalConsoleClearjButtonActionPerformed(evt);
            }
        });
        getContentPane().add(globalConsoleClearjButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 390, 60, 20));

        PROJECTADDRESSjLabel.setFont(new Font("宋体", 0, 10)); // NOI18N
        PROJECTADDRESSjLabel.setText(null);
        //PROJECTADDRESSjLabel.setText("gitee地址：https://gitee.com/hackempire/patch-generator-desk");
        PROJECTADDRESSjLabel.setAutoscrolls(true);
        PROJECTADDRESSjLabel.setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
        getContentPane().add(PROJECTADDRESSjLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 390, 470, 20));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * SVN日志增量映射表删除一行
     * @param evt
     */
    private void SVNLOGDELjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGDELjButtonActionPerformed
        ((DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel()).removeRow(SVNLOGSOURCEMAPPERjTable.getSelectedRow());
    }//GEN-LAST:event_SVNLOGDELjButtonActionPerformed

    /**
     * SVN日志增量映射表增加一行
     * @param evt
     */
    private void SVNLOGADDjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGADDjButtonActionPerformed
        ((DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel()).addRow(new String[]{"", "", ""});
    }//GEN-LAST:event_SVNLOGADDjButtonActionPerformed

    /**
     * SVN日志增量点击打包
     * @param evt
     */
    private void SVNLOGOUTPACKjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGOUTPACKjButtonActionPerformed
        String projectName = SVNLOGPROJECTNAMEjTextField.getText();
        String projectPath = SVNLOGPROJECTPATHjTextField.getText();
        String logPath = SVNLOGPATHjTextField.getText();
        String outputPath = SVNLOGOUTPUTjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (SVNLOGPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        SvnProjectInfo projectInfo = new SvnProjectInfo();
        projectInfo.setProjectName(projectName);
        projectInfo.setProjectType(projectType);
        if (!projectPath.endsWith("/")) {
            projectPath = projectPath + "/";
        }
        projectInfo.setTargetBaseDir(projectPath);
        projectInfo.setVersionManagerTypeEnum(VersionManagerTypeEnum.SVN);
        projectInfo.setSourceMappers(sourceMappers);
        PatchInfo patchInfo = new PatchInfo();
        patchInfo.setGenType(GenTypeEnum.LOG);
        patchInfo.setPatchFileDir(outputPath);
        patchInfo.setPatchFile(logPath);
        GeneratePatchExecutor.execute((ProjectInfo) projectInfo, patchInfo);
        LOGGER.info("打包完成");
    }//GEN-LAST:event_SVNLOGOUTPACKjButtonActionPerformed

    /**
     * SVN日志增量-增量包输出目录选择
     * @param evt
     */
    private void SVNLOGOUTPUTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGOUTPUTjButtonActionPerformed
        String oldPomPath = SVNLOGOUTPUTjTextField.getText();
        //设置只能选择目录
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, SVNLOGOUTPUTjTextField, oldPomPath, null);
    }//GEN-LAST:event_SVNLOGOUTPUTjButtonActionPerformed

    /**
     * SVN日志增量-服务器项目URL路径选择
     * @param evt
     */
    private void SVNLOGPATHjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGPATHjButtonActionPerformed
        String oldPomPath = SVNLOGPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.FILES_ONLY, SVNLOGPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_SVNLOGPATHjButtonActionPerformed

    /**
     * SVN日志增量项目本地路径选择
     * @param evt
     */
    private void SVNLOGPROJECTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGPROJECTjButtonActionPerformed
        String oldPomPath = SVNLOGPROJECTPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, SVNLOGPROJECTPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_SVNLOGPROJECTjButtonActionPerformed

    private void SVNLOGSOURCEMAPPERjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SVNLOGSOURCEMAPPERjTableMouseClicked
        // TODO add your handling code here:
//        int selectedRow = SVNLOGSOURCEMAPPERjTable.getSelectedRow(); //获得选中行索引
//        if (selectedRow != -1) {
//            
//        }
    }//GEN-LAST:event_SVNLOGSOURCEMAPPERjTableMouseClicked

    /**
     * SVN日志增量配置保存
     * @param evt
     */
    private void SVNLOGSAVECONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGSAVECONFIGjButtonActionPerformed
        // TODO add your handling code here:
        String projectName = SVNLOGPROJECTNAMEjTextField.getText();
        String projectPath = SVNLOGPROJECTPATHjTextField.getText();
        String logPath = SVNLOGPATHjTextField.getText();
        String outputPath = SVNLOGOUTPUTjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (SVNLOGPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        String oldConfig = svnLogProjectConfig;
        if (StringUtils.isNotBlank(svnLogProjectConfig)) {
            svnLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, svnLogProjectConfig, "xml");
        } else {
            svnLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        if (svnLogProjectConfig != null) {
            try {
                //DocumentHelper提供了创建Document对象的方法 
                Document document = DocumentHelper.createDocument();
                //添加节点信息 
                Element rootElement = document.addElement("patch-config");
                //这里可以继续添加子节点，也可以指定内容 
                //rootElement.setText("这个是module标签的文本信息");
                Element projectNameElement = rootElement.addElement("project-name");
                projectNameElement.setText(projectName);
                Element projectPathElement = rootElement.addElement("project-path");
                projectPathElement.setText(projectPath);
                Element logPathElement = rootElement.addElement("log-path");
                logPathElement.setText(logPath);
                Element outputPathElement = rootElement.addElement("output-path");
                outputPathElement.setText(outputPath);
                Element projectTypeElement = rootElement.addElement("project-type");
                projectTypeElement.setText(projectType.name());
                Element genTypeTypeElement = rootElement.addElement("gen-type");
                genTypeTypeElement.setText(GenTypeEnum.LOG.name());
                Element versionManagerTypeElement = rootElement.addElement("version-manager-type");
                versionManagerTypeElement.setText(VersionManagerTypeEnum.SVN.name());
                if (sourceMappers.size() > 0) {
                    Element sourceMappersElement = rootElement.addElement("source-mappers");
                    for (SourceMapper sourceMapper : sourceMappers) {
                        Element sourceMapperElement = sourceMappersElement.addElement("source-mapper");
                        Element sourceDirElement = sourceMapperElement.addElement("source-dir");
                        sourceDirElement.setText(sourceMapper.getSourceDir());
                        Element targetDirElement = sourceMapperElement.addElement("target-dir");
                        targetDirElement.setText(sourceMapper.getTargetDir());
                        Element patchDirElement = sourceMapperElement.addElement("patch-dir");
                        patchDirElement.setText(sourceMapper.getPatchDir());
                    }
                }
                Writer fileWriter = new FileWriter(svnLogProjectConfig);
                //设置文件编码  
                OutputFormat xmlFormat = new OutputFormat();
                xmlFormat.setEncoding("UTF-8");
                // 设置换行 
                xmlFormat.setNewlines(true);
                // 生成缩进 
                xmlFormat.setIndent(true);
                // 使用4个空格进行缩进, 可以兼容文本编辑器 
                xmlFormat.setIndent("    ");
                //dom4j提供了专门写入文件的对象XMLWriter 
                XMLWriter xmlWriter = new XMLWriter(fileWriter, xmlFormat);
                xmlWriter.write(document);
                xmlWriter.flush();
                xmlWriter.close();
                LOGGER.info("SVN日志增量保存配置文件保存成功！路径：{}", svnLogProjectConfig);
            } catch (IOException e) {
                LOGGER.error("SVN日志增量保存配置文件异常", e);
            }
        }
        if (StringUtils.isBlank(svnLogProjectConfig)) {
            svnLogProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_SVNLOGSAVECONFIGjButtonActionPerformed

    /**
     * GIT日志增量项目本地路径选择
     * @param evt
     */
    private void GITLOGPROJECTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGPROJECTjButtonActionPerformed
        // TODO add your handling code here:
        String oldPomPath = GITLOGPROJECTPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, GITLOGPROJECTPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_GITLOGPROJECTjButtonActionPerformed

    /**
     * GIT日志增量-本地记录的日志文件
     * @param evt
     */
    private void GITLOGPATHjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGPATHjButtonActionPerformed
        String oldPomPath = GITLOGPATHjTextField.getText();
        // 设置智能选择文件
        doJfileChooseAction(JFileChooser.FILES_ONLY, GITLOGPATHjTextField, oldPomPath, "txt");
    }//GEN-LAST:event_GITLOGPATHjButtonActionPerformed

    /**
     * GIT日志增量-增量包输出目录选择
     * @param evt
     */
    private void GITLOGOUTPUTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGOUTPUTjButtonActionPerformed
        String oldPomPath = GITLOGOUTPUTjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, GITLOGOUTPUTjTextField, oldPomPath, null);
    }//GEN-LAST:event_GITLOGOUTPUTjButtonActionPerformed

    private void GITLOGSOURCEMAPPERjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GITLOGSOURCEMAPPERjTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_GITLOGSOURCEMAPPERjTableMouseClicked

    /**
     * GIT日志增量-映射表添加一行
     * @param evt
     */
    private void GITLOGADDjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGADDjButtonActionPerformed
        ((DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel()).addRow(new String[]{"", "", ""});
    }//GEN-LAST:event_GITLOGADDjButtonActionPerformed

    /**
     * GIT日志增量-映射表删除一行
     * @param evt
     */
    private void GITLOGDELjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGDELjButtonActionPerformed
        // TODO add your handling code here:
        ((DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel()).removeRow(GITLOGSOURCEMAPPERjTable.getSelectedRow());
    }//GEN-LAST:event_GITLOGDELjButtonActionPerformed

    /**
     * GIT日志增量-保存配置
     * @param evt
     */
    private void GITLOGSAVECONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGSAVECONFIGjButtonActionPerformed
        // TODO add your handling code here:
        String projectName = GITLOGPROJECTNAMEjTextField.getText();
        String projectPath = GITLOGPROJECTPATHjTextField.getText();
        String logPath = GITLOGPATHjTextField.getText();
        String outputPath = GITLOGOUTPUTjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (GITLOGPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        String oldConfig = gitLogProjectConfig;
        if (StringUtils.isNotBlank(gitLogProjectConfig)) {
            gitLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, gitLogProjectConfig, "xml");
        } else {
            gitLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        if (gitLogProjectConfig != null) {
            try {
                //DocumentHelper提供了创建Document对象的方法 
                Document document = DocumentHelper.createDocument();
                //添加节点信息 
                Element rootElement = document.addElement("patch-config");
                //这里可以继续添加子节点，也可以指定内容 
                //rootElement.setText("这个是module标签的文本信息");
                Element projectNameElement = rootElement.addElement("project-name");
                projectNameElement.setText(projectName);
                Element projectPathElement = rootElement.addElement("project-path");
                projectPathElement.setText(projectPath);
                Element logPathElement = rootElement.addElement("log-path");
                logPathElement.setText(logPath);
                Element outputPathElement = rootElement.addElement("output-path");
                outputPathElement.setText(outputPath);
                Element projectTypeElement = rootElement.addElement("project-type");
                projectTypeElement.setText(projectType.name());
                Element genTypeTypeElement = rootElement.addElement("gen-type");
                genTypeTypeElement.setText(GenTypeEnum.LOG.name());
                Element versionManagerTypeElement = rootElement.addElement("version-manager-type");
                versionManagerTypeElement.setText(VersionManagerTypeEnum.GIT.name());
                if (sourceMappers.size() > 0) {
                    Element sourceMappersElement = rootElement.addElement("source-mappers");
                    for (SourceMapper sourceMapper : sourceMappers) {
                        Element sourceMapperElement = sourceMappersElement.addElement("source-mapper");
                        Element sourceDirElement = sourceMapperElement.addElement("source-dir");
                        sourceDirElement.setText(sourceMapper.getSourceDir());
                        Element targetDirElement = sourceMapperElement.addElement("target-dir");
                        targetDirElement.setText(sourceMapper.getTargetDir());
                        Element patchDirElement = sourceMapperElement.addElement("patch-dir");
                        patchDirElement.setText(sourceMapper.getPatchDir());
                    }
                }
                Writer fileWriter = new FileWriter(gitLogProjectConfig);
                //设置文件编码  
                OutputFormat xmlFormat = new OutputFormat();
                xmlFormat.setEncoding("UTF-8");
                // 设置换行 
                xmlFormat.setNewlines(true);
                // 生成缩进 
                xmlFormat.setIndent(true);
                // 使用4个空格进行缩进, 可以兼容文本编辑器 
                xmlFormat.setIndent("    ");
                //dom4j提供了专门写入文件的对象XMLWriter 
                XMLWriter xmlWriter = new XMLWriter(fileWriter, xmlFormat);
                xmlWriter.write(document);
                xmlWriter.flush();
                xmlWriter.close();
                LOGGER.info("GIT日志增量保存配置文件保存成功！路径：{}", gitLogProjectConfig);
            } catch (IOException e) {
                LOGGER.error("GIT日志增量保存配置文件异常", e);
            }
        }
        if (StringUtils.isBlank(gitLogProjectConfig)) {
            gitLogProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_GITLOGSAVECONFIGjButtonActionPerformed

    /**
     * GIt日志增量-点击打增量包
     * @param evt
     */
    private void GITLOGOUTPACKjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGOUTPACKjButtonActionPerformed
        String projectName = GITLOGPROJECTNAMEjTextField.getText();
        String projectPath = GITLOGPROJECTPATHjTextField.getText();
        String logPath = GITLOGPATHjTextField.getText();
        String outputPath = GITLOGOUTPUTjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (GITLOGPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        GitProjectInfo projectInfo = new GitProjectInfo();
        projectInfo.setProjectName(projectName);
        projectInfo.setProjectType(projectType);
        if (!projectPath.endsWith("/")) {
            projectPath = projectPath + "/";
        }
        projectInfo.setTargetBaseDir(projectPath);
        projectInfo.setVersionManagerTypeEnum(VersionManagerTypeEnum.GIT);
        projectInfo.setSourceMappers(sourceMappers);
        PatchInfo patchInfo = new PatchInfo();
        patchInfo.setGenType(GenTypeEnum.LOG);
        patchInfo.setPatchFileDir(outputPath);
        patchInfo.setPatchFile(logPath);
        GeneratePatchExecutor.execute((ProjectInfo) projectInfo, patchInfo);
        LOGGER.info("打包完成");
    }//GEN-LAST:event_GITLOGOUTPACKjButtonActionPerformed

    /**
     * 点击清空控制台的内容
     * @param evt
     */
    private void globalConsoleClearjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_globalConsoleClearjButtonActionPerformed
        globalConsolejTextPane.setText("");
    }//GEN-LAST:event_globalConsoleClearjButtonActionPerformed

    /**
     * GIT服务器增量项目目录路径选择
     * @param evt
     */
    private void GITSERVERPROJECTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERPROJECTjButtonActionPerformed
        String oldPomPath = GITSERVERPROJECTPATHjTextField.getText();
        //设置只能选择目录
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, GITSERVERPROJECTPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_GITSERVERPROJECTjButtonActionPerformed

    /**
     * GIT服务器增量项目本地.git文件夹目录路径选择
     * @param evt
     */
    private void GITSERVERPATHjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERPATHjButtonActionPerformed
        String oldPomPath = GITSERVERPATHjTextField.getText();
        //设置只能选择目录
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, GITSERVERPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_GITSERVERPATHjButtonActionPerformed

    /**
     * GIT服务器增量输出目录选择
     * @param evt
     */
    private void GITSERVEROUTPUTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVEROUTPUTjButtonActionPerformed
        String oldPomPath = GITSERVEROUTPUTjTextField.getText();
        //设置只能选择目录
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, GITSERVEROUTPUTjTextField, oldPomPath, null);
    }//GEN-LAST:event_GITSERVEROUTPUTjButtonActionPerformed

    /**
     * GIT服务器增量映射表添加一空行
     * @param evt
     */
    private void GITSERVERADDjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERADDjButtonActionPerformed
        ((DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel()).addRow(new String[]{"", "", ""});
    }//GEN-LAST:event_GITSERVERADDjButtonActionPerformed

    /**
     * GIT服务器增量删除一行
     * @param evt
     */
    private void GITSERVERDELjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERDELjButtonActionPerformed
        ((DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel()).removeRow(GITSERVERSOURCEMAPPERjTable.getSelectedRow());
    }//GEN-LAST:event_GITSERVERDELjButtonActionPerformed

    /**
     * GIT服务器增量-保存配置文件
     * @param evt
     */
    private void GITSERVERSAVECONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERSAVECONFIGjButtonActionPerformed
        String projectName = GITSERVERPROJECTNAMEjTextField.getText();
        String projectPath = GITSERVERPROJECTPATHjTextField.getText();
        String logPath = GITSERVERPATHjTextField.getText();
        String outputPath = GITSERVEROUTPUTjTextField.getText();
        String startVersion = GITSERVERVERSIONSTARTjTextField.getText();
        String endVersion = GITSERVERVERSIONENDjTextField.getText();
        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (GITSERVERPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        String oldConfig = gitServerProjectConfig;
        if (StringUtils.isNotBlank(gitServerProjectConfig)) {
            gitServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, gitLogProjectConfig, "xml");
        } else {
            gitServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        if (gitServerProjectConfig != null) {
            try {
                //DocumentHelper提供了创建Document对象的方法 
                Document document = DocumentHelper.createDocument();
                //添加节点信息 
                Element rootElement = document.addElement("patch-config");
                //这里可以继续添加子节点，也可以指定内容 
                //rootElement.setText("这个是module标签的文本信息");
                Element projectNameElement = rootElement.addElement("project-name");
                projectNameElement.setText(projectName);
                Element projectPathElement = rootElement.addElement("project-path");
                projectPathElement.setText(projectPath);
                Element logPathElement = rootElement.addElement("log-path");
                logPathElement.setText(logPath);
                Element outputPathElement = rootElement.addElement("output-path");
                outputPathElement.setText(outputPath);
                Element projectTypeElement = rootElement.addElement("project-type");
                projectTypeElement.setText(projectType.name());
                Element genTypeTypeElement = rootElement.addElement("gen-type");
                genTypeTypeElement.setText(GenTypeEnum.VERSION.name());
                Element versionManagerTypeElement = rootElement.addElement("version-manager-type");
                versionManagerTypeElement.setText(VersionManagerTypeEnum.GIT.name());
                Element startVersionElement = rootElement.addElement("start-version");
                startVersionElement.setText(startVersion);
                Element endVersionElement = rootElement.addElement("end-version");
                endVersionElement.setText(endVersion);
                if (sourceMappers.size() > 0) {
                    Element sourceMappersElement = rootElement.addElement("source-mappers");
                    for (SourceMapper sourceMapper : sourceMappers) {
                        Element sourceMapperElement = sourceMappersElement.addElement("source-mapper");
                        Element sourceDirElement = sourceMapperElement.addElement("source-dir");
                        sourceDirElement.setText(sourceMapper.getSourceDir());
                        Element targetDirElement = sourceMapperElement.addElement("target-dir");
                        targetDirElement.setText(sourceMapper.getTargetDir());
                        Element patchDirElement = sourceMapperElement.addElement("patch-dir");
                        patchDirElement.setText(sourceMapper.getPatchDir());
                    }
                }
                Writer fileWriter = new FileWriter(gitServerProjectConfig);
                //设置文件编码  
                OutputFormat xmlFormat = new OutputFormat();
                xmlFormat.setEncoding("UTF-8");
                // 设置换行 
                xmlFormat.setNewlines(true);
                // 生成缩进 
                xmlFormat.setIndent(true);
                // 使用4个空格进行缩进, 可以兼容文本编辑器 
                xmlFormat.setIndent("    ");
                //dom4j提供了专门写入文件的对象XMLWriter 
                XMLWriter xmlWriter = new XMLWriter(fileWriter, xmlFormat);
                xmlWriter.write(document);
                xmlWriter.flush();
                xmlWriter.close();
                LOGGER.info("GIT服务器增量保存配置文件保存成功！路径：{}", gitServerProjectConfig);
            } catch (IOException e) {
                LOGGER.error("GIT服务器增量保存配置文件异常", e);
            }
        }
        if (StringUtils.isBlank(gitServerProjectConfig)) {
            gitServerProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_GITSERVERSAVECONFIGjButtonActionPerformed

    /**
     * GIT服务器增量点击打包按钮执行打包事件
     * @param evt
     */
    private void GITSERVEROUTPACKjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVEROUTPACKjButtonActionPerformed
        String projectName = GITSERVERPROJECTNAMEjTextField.getText();
        String projectPath = GITSERVERPROJECTPATHjTextField.getText();
        String gitRepositoryUrl = GITSERVERPATHjTextField.getText();
        String outputPath = GITSERVEROUTPUTjTextField.getText();
        String startVersion = GITSERVERVERSIONSTARTjTextField.getText();
        String endVersion = GITSERVERVERSIONENDjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (GITSERVERPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        GitProjectInfo projectInfo = new GitProjectInfo();
        projectInfo.setProjectName(projectName);
        projectInfo.setProjectType(projectType);
        if (!projectPath.endsWith("/")) {
            projectPath = projectPath + "/";
        }
        projectInfo.setTargetBaseDir(projectPath);
        projectInfo.setGitRepositoryUrl(gitRepositoryUrl);
        projectInfo.setVersionManagerTypeEnum(VersionManagerTypeEnum.GIT);
        projectInfo.setSourceMappers(sourceMappers);
        PatchInfo patchInfo = new PatchInfo();
        patchInfo.setGenType(GenTypeEnum.VERSION);
        patchInfo.setPatchFileDir(outputPath);
        patchInfo.setStartVersion(startVersion);
        patchInfo.setEndVersion(endVersion);
        GeneratePatchExecutor.execute((ProjectInfo) projectInfo, patchInfo);
        LOGGER.info("打包完成");
    }//GEN-LAST:event_GITSERVEROUTPACKjButtonActionPerformed

    /**
     * SVN服务器增量-项目本地目录选择
     * @param evt
     */
    private void SVNSERVERPROJECTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVERPROJECTjButtonActionPerformed
        // TODO add your handling code here:
        String oldPomPath = SVNSERVERPROJECTPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, SVNSERVERPROJECTPATHjTextField, oldPomPath, null);
    }//GEN-LAST:event_SVNSERVERPROJECTjButtonActionPerformed

    /**
     * SVN服务器增量-增量包输出目录选择
     * @param evt
     */
    private void SVNSERVEROUTPUTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVEROUTPUTjButtonActionPerformed
        String oldPomPath = SVNSERVEROUTPUTjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, SVNSERVEROUTPUTjTextField, oldPomPath, null);
    }//GEN-LAST:event_SVNSERVEROUTPUTjButtonActionPerformed

    private void SVNSERVERSOURCEMAPPERjTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SVNSERVERSOURCEMAPPERjTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_SVNSERVERSOURCEMAPPERjTableMouseClicked

    /**
     * SVN服务器增量-映射表新增一行
     * @param evt
     */
    private void SVNSERVERADDjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVERADDjButtonActionPerformed
        ((DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel()).addRow(new String[]{"", "", ""});
    }//GEN-LAST:event_SVNSERVERADDjButtonActionPerformed

    /**
     * SVN服务器增量-映射表删除一行
     * @param evt
     */
    private void SVNSERVERDELjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVERDELjButtonActionPerformed
        ((DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel()).removeRow(SVNSERVERSOURCEMAPPERjTable.getSelectedRow());
    }//GEN-LAST:event_SVNSERVERDELjButtonActionPerformed

    /**
     * SVN服务器增量-配置文件保存
     * @param evt
     */
    private void SVNSERVERSAVECONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVERSAVECONFIGjButtonActionPerformed
        // TODO add your handling code here:
        String projectName = SVNSERVERPROJECTNAMEjTextField.getText();
        String projectPath = SVNSERVERPROJECTPATHjTextField.getText();
        String svnPath = SVNSERVERPATHjTextField.getText();
        String outputPath = SVNSERVEROUTPUTjTextField.getText();
        String startVersion = SVNSERVERVERSIONSTARTjTextField.getText();
        String endVersion = SVNSERVERVERSIONENDjTextField.getText();
        String excludeVersion = SVNSERVEREXCLUDEjTextField.getText();
        String acount = SVNSERVERACOUNTjTextField.getText();
        String pwd = new String(SVNSERVERPWDjPasswordField.getPassword());
        String reviseMapper = SVNSERVERREVISEjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (SVNSERVERPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        String oldConfig = svnServerProjectConfig;
        if (StringUtils.isNotBlank(svnServerProjectConfig)) {
            svnServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, svnServerProjectConfig, "xml");
        } else {
            svnServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        if (svnServerProjectConfig != null) {
            try {
                //DocumentHelper提供了创建Document对象的方法 
                Document document = DocumentHelper.createDocument();
                //添加节点信息 
                Element rootElement = document.addElement("patch-config");
                //这里可以继续添加子节点，也可以指定内容 
                //rootElement.setText("这个是module标签的文本信息");
                Element projectNameElement = rootElement.addElement("project-name");
                projectNameElement.setText(projectName);
                Element projectPathElement = rootElement.addElement("project-path");
                projectPathElement.setText(projectPath);
                Element svnPathElement = rootElement.addElement("svn-url");
                svnPathElement.setText(svnPath);
                Element acountElement = rootElement.addElement("svn-acount");
                acountElement.setText(acount);
                Element pwdElement = rootElement.addElement("svn-pwd");
                pwdElement.setText(pwd);
                Element reviseMapperElement = rootElement.addElement("revise-mapper");
                reviseMapperElement.setText(reviseMapper);
                Element outputPathElement = rootElement.addElement("output-path");
                outputPathElement.setText(outputPath);
                Element projectTypeElement = rootElement.addElement("project-type");
                projectTypeElement.setText(projectType.name());
                Element genTypeTypeElement = rootElement.addElement("gen-type");
                genTypeTypeElement.setText(GenTypeEnum.VERSION.name());
                Element versionManagerTypeElement = rootElement.addElement("version-manager-type");
                versionManagerTypeElement.setText(VersionManagerTypeEnum.SVN.name());
                Element startVersionElement = rootElement.addElement("start-version");
                startVersionElement.setText(startVersion);
                Element endVersionElement = rootElement.addElement("end-version");
                endVersionElement.setText(endVersion);
                Element excludeVersionElement = rootElement.addElement("exclude-version");
                excludeVersionElement.setText(excludeVersion);
                if (sourceMappers.size() > 0) {
                    Element sourceMappersElement = rootElement.addElement("source-mappers");
                    for (SourceMapper sourceMapper : sourceMappers) {
                        Element sourceMapperElement = sourceMappersElement.addElement("source-mapper");
                        Element sourceDirElement = sourceMapperElement.addElement("source-dir");
                        sourceDirElement.setText(sourceMapper.getSourceDir());
                        Element targetDirElement = sourceMapperElement.addElement("target-dir");
                        targetDirElement.setText(sourceMapper.getTargetDir());
                        Element patchDirElement = sourceMapperElement.addElement("patch-dir");
                        patchDirElement.setText(sourceMapper.getPatchDir());
                    }
                }
                Writer fileWriter = new FileWriter(svnServerProjectConfig);
                //设置文件编码  
                OutputFormat xmlFormat = new OutputFormat();
                xmlFormat.setEncoding("UTF-8");
                // 设置换行 
                xmlFormat.setNewlines(true);
                // 生成缩进 
                xmlFormat.setIndent(true);
                // 使用4个空格进行缩进, 可以兼容文本编辑器 
                xmlFormat.setIndent("    ");
                //dom4j提供了专门写入文件的对象XMLWriter 
                XMLWriter xmlWriter = new XMLWriter(fileWriter, xmlFormat);
                xmlWriter.write(document);
                xmlWriter.flush();
                xmlWriter.close();
                LOGGER.info("SVN服务器增量保存配置文件保存成功！路径：{}", svnServerProjectConfig);
            } catch (IOException e) {
                LOGGER.error("SVN服务器增量保存配置文件异常", e);
            }
        }
        if (StringUtils.isBlank(svnServerProjectConfig)) {
            svnServerProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_SVNSERVERSAVECONFIGjButtonActionPerformed

    /**
     * SVN服务器增量-点击增量打包
     * @param evt
     */
    private void SVNSERVEROUTPACKjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVEROUTPACKjButtonActionPerformed
        // TODO add your handling code here:
        String projectName = SVNSERVERPROJECTNAMEjTextField.getText();
        String projectPath = SVNSERVERPROJECTPATHjTextField.getText();
        String svnUrl = SVNSERVERPATHjTextField.getText();
        String outputPath = SVNSERVEROUTPUTjTextField.getText();
        String startVersion = SVNSERVERVERSIONSTARTjTextField.getText();
        String endVersion = SVNSERVERVERSIONENDjTextField.getText();
        String excludeVersion = SVNSERVEREXCLUDEjTextField.getText();
        String acount = SVNSERVERACOUNTjTextField.getText();
        String pwd = new String(SVNSERVERPWDjPasswordField.getPassword());
        String reviseMapper = SVNSERVERREVISEjTextField.getText();

        List<SourceMapper> sourceMappers = new ArrayList<>();
        DefaultTableModel sourceMapperModel = (DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel();
        int rowCount = sourceMapperModel.getRowCount();
        for (int i = 0; i < rowCount; i++) {
            String sourceDir = sourceMapperModel.getValueAt(i, 0) != null ? sourceMapperModel.getValueAt(i, 0).toString() : "";
            String targetDir = sourceMapperModel.getValueAt(i, 1) != null ? sourceMapperModel.getValueAt(i, 1).toString() : "";
            String patchDir = sourceMapperModel.getValueAt(i, 2) != null ? sourceMapperModel.getValueAt(i, 2).toString() : "";
            if (StringUtils.isNotBlank(sourceDir) && StringUtils.isNotBlank(targetDir)) {
                SourceMapper sourceMapper = new SourceMapper(sourceDir, targetDir, patchDir);
                sourceMappers.add(sourceMapper);
            }
        }
        ProjectTypeEnum projectType = ProjectTypeEnum.SINGLEMODULE;
        if (SVNSERVERPROJECTMUTILjRadioButton.isSelected()) {
            projectType = ProjectTypeEnum.MULTIMODULE;
        }
        SvnProjectInfo projectInfo = new SvnProjectInfo();
        projectInfo.setProjectName(projectName);
        projectInfo.setProjectType(projectType);
        if (!projectPath.endsWith("/")) {
            projectPath = projectPath + "/";
        }
        projectInfo.setTargetBaseDir(projectPath);
        projectInfo.setSvnUrl(svnUrl);
        projectInfo.setVersionManagerTypeEnum(VersionManagerTypeEnum.SVN);
        projectInfo.setSourceMappers(sourceMappers);
        if (StringUtils.isNotBlank(reviseMapper)) {
            String[] reviseArr = reviseMapper.split(":");
            if (reviseArr.length == 1) {
                projectInfo.setReviseMapper(new ProjectReviseMapper(reviseMapper, ""));
            } else {
                projectInfo.setReviseMapper(new ProjectReviseMapper(reviseArr[0], reviseArr[1]));
            }
        }
        projectInfo.setSvnUsername(acount);
        projectInfo.setSvnPassword(pwd);
        PatchInfo patchInfo = new PatchInfo();
        patchInfo.setGenType(GenTypeEnum.VERSION);
        patchInfo.setPatchFileDir(outputPath);
        patchInfo.setStartVersion(startVersion);
        patchInfo.setEndVersion(endVersion);
        List<String> excludeRevisions = new ArrayList<>();
        if (StringUtils.isNotBlank(excludeVersion)) {
            excludeRevisions = Arrays.asList(excludeVersion.split(","));
        }

        patchInfo.setExcludeRevisions(excludeRevisions);
        GeneratePatchExecutor.execute((ProjectInfo) projectInfo, patchInfo);
        LOGGER.info("打包完成");
    }//GEN-LAST:event_SVNSERVEROUTPACKjButtonActionPerformed

    private void GITSERVERPROJECTCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITSERVERPROJECTCONFIGjButtonActionPerformed
        String oldConfig = gitServerProjectConfig;
        if (StringUtils.isNotBlank(gitServerProjectConfig)) {
            gitServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, gitLogProjectConfig, "xml");
        } else {
            gitServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        LOGGER.info(gitServerProjectConfig);
        if (StringUtils.isNotBlank(gitServerProjectConfig)) {
            Document document = DOMUtils.getXMLByFilePath(gitServerProjectConfig);
            Element root = document.getRootElement();
            String genType = DOMUtils.getTextTrim(root, "gen-type");
            String versionManagerType = DOMUtils.getTextTrim(root, "version-manager-type");
            if (GenTypeEnum.VERSION.name().equals(genType) && VersionManagerTypeEnum.GIT.name().equals(versionManagerType)) {
                String projectName = DOMUtils.getTextTrim(root, "project-name");
                GITSERVERPROJECTNAMEjTextField.setText(projectName);
                String projectPath = DOMUtils.getTextTrim(root, "project-path");
                GITSERVERPROJECTPATHjTextField.setText(projectPath);
                String logPath = DOMUtils.getTextTrim(root, "log-path");
                GITSERVERPATHjTextField.setText(logPath);
                String outputPath = DOMUtils.getTextTrim(root, "output-path");
                GITSERVEROUTPUTjTextField.setText(outputPath);
                String projectType = DOMUtils.getTextTrim(root, "project-type");
                if (ProjectTypeEnum.MULTIMODULE.name().equals(projectType)) {
                    GITSERVERPROJECTMUTILjRadioButton.setSelected(true);
                } else {
                    GITSERVERPROJECTSINGLEjRadioButton.setSelected(true);
                }
                String startVersion = DOMUtils.getTextTrim(root, "start-version");
                GITSERVERVERSIONSTARTjTextField.setText(startVersion);
                String endVersion = DOMUtils.getTextTrim(root, "end-version");
                GITSERVERVERSIONENDjTextField.setText(endVersion);

                ((DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel()).setRowCount(0);
                Element sourceMappersElment = DOMUtils.getChildElement(root, "source-mappers");
                if (sourceMappersElment != null) {
                    List<Element> sourceMappers = DOMUtils.getChildElements(sourceMappersElment);
                    if (sourceMappers != null) {
                        for (int i = 0, j = sourceMappers.size(); i < j; i++) {
                            Element curr = sourceMappers.get(i);
                            String sourceDir = DOMUtils.getTextTrim(curr, "source-dir");
                            String targetDir = DOMUtils.getTextTrim(curr, "target-dir");
                            String patchDir = DOMUtils.getTextTrim(curr, "patch-dir");
                            ((DefaultTableModel) GITSERVERSOURCEMAPPERjTable.getModel()).addRow(new String[]{sourceDir, targetDir, patchDir});
                        }
                    }
                }
                LOGGER.info("配置文件类型文件导入成功！");
            } else {
                LOGGER.error("配置文件类型文件gen-type、version-manager-type与当前类型不匹配！");
            }
        }
        if (StringUtils.isBlank(gitServerProjectConfig)) {
            gitServerProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_GITSERVERPROJECTCONFIGjButtonActionPerformed

    /**
     * SVN服务器增量-导入配置文件
     * @param evt
     */
    private void SVNSERVERPROJECTCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNSERVERPROJECTCONFIGjButtonActionPerformed
        String oldConfig = svnServerProjectConfig;
        if (StringUtils.isNotBlank(svnServerProjectConfig)) {
            svnServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, svnServerProjectConfig, "xml");
        } else {
            svnServerProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        LOGGER.info(svnServerProjectConfig);
        if (StringUtils.isNotBlank(svnServerProjectConfig)) {
            Document document = DOMUtils.getXMLByFilePath(svnServerProjectConfig);
            Element root = document.getRootElement();
            String genType = DOMUtils.getTextTrim(root, "gen-type");
            String versionManagerType = DOMUtils.getTextTrim(root, "version-manager-type");
            if (GenTypeEnum.VERSION.name().equals(genType) && VersionManagerTypeEnum.SVN.name().equals(versionManagerType)) {
                String projectName = DOMUtils.getTextTrim(root, "project-name");
                SVNSERVERPROJECTNAMEjTextField.setText(projectName);
                String projectPath = DOMUtils.getTextTrim(root, "project-path");
                SVNSERVERPROJECTPATHjTextField.setText(projectPath);
                String svnPath = DOMUtils.getTextTrim(root, "svn-url");
                SVNSERVERPATHjTextField.setText(svnPath);
                String acount = DOMUtils.getTextTrim(root, "svn-acount");
                SVNSERVERACOUNTjTextField.setText(acount);
                String pwd = DOMUtils.getTextTrim(root, "svn-pwd");
                SVNSERVERPWDjPasswordField.setText(pwd);
                String excludeVersion = DOMUtils.getTextTrim(root, "exclude-version");
                SVNSERVEREXCLUDEjTextField.setText(excludeVersion);

                String outputPath = DOMUtils.getTextTrim(root, "output-path");
                SVNSERVEROUTPUTjTextField.setText(outputPath);
                String projectType = DOMUtils.getTextTrim(root, "project-type");
                if (ProjectTypeEnum.MULTIMODULE.name().equals(projectType)) {
                    SVNSERVERPROJECTMUTILjRadioButton.setSelected(true);
                } else {
                    SVNSERVERPROJECTSINGLEjRadioButton.setSelected(true);
                }
                String startVersion = DOMUtils.getTextTrim(root, "start-version");
                SVNSERVERVERSIONSTARTjTextField.setText(startVersion);
                String endVersion = DOMUtils.getTextTrim(root, "end-version");
                SVNSERVERVERSIONENDjTextField.setText(endVersion);
                String reviseMapper = DOMUtils.getTextTrim(root, "revise-mapper");
                SVNSERVERREVISEjTextField.setText(reviseMapper);
                ((DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel()).setRowCount(0);
                Element sourceMappersElment = DOMUtils.getChildElement(root, "source-mappers");
                if (sourceMappersElment != null) {
                    List<Element> sourceMappers = DOMUtils.getChildElements(sourceMappersElment);
                    if (sourceMappers != null) {
                        for (int i = 0, j = sourceMappers.size(); i < j; i++) {
                            Element curr = sourceMappers.get(i);
                            String sourceDir = DOMUtils.getTextTrim(curr, "source-dir");
                            String targetDir = DOMUtils.getTextTrim(curr, "target-dir");
                            String patchDir = DOMUtils.getTextTrim(curr, "patch-dir");
                            ((DefaultTableModel) SVNSERVERSOURCEMAPPERjTable.getModel()).addRow(new String[]{sourceDir, targetDir, patchDir});
                        }
                    }
                }
                LOGGER.info("配置文件类型文件导入成功！");
            } else {
                LOGGER.error("配置文件类型文件gen-type、version-manager-type与当前类型不匹配！");
            }

        }
        if (StringUtils.isBlank(svnServerProjectConfig)) {
            svnServerProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_SVNSERVERPROJECTCONFIGjButtonActionPerformed

    /**
     * git日志增量-导入配置文件
     * @param evt
     */
    private void GITLOGPROJECTCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GITLOGPROJECTCONFIGjButtonActionPerformed
        String oldConfig = gitLogProjectConfig;
        if (StringUtils.isNotBlank(gitLogProjectConfig)) {
            gitLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, gitLogProjectConfig, "xml");
        } else {
            gitLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        LOGGER.info(gitLogProjectConfig);
        if (StringUtils.isNotBlank(gitLogProjectConfig)) {
            Document document = DOMUtils.getXMLByFilePath(gitLogProjectConfig);
            Element root = document.getRootElement();
            String genType = DOMUtils.getTextTrim(root, "gen-type");
            String versionManagerType = DOMUtils.getTextTrim(root, "version-manager-type");
            if (GenTypeEnum.LOG.name().equals(genType) && VersionManagerTypeEnum.GIT.name().equals(versionManagerType)) {
                String projectName = DOMUtils.getTextTrim(root, "project-name");
                GITLOGPROJECTNAMEjTextField.setText(projectName);
                String projectPath = DOMUtils.getTextTrim(root, "project-path");
                GITLOGPROJECTPATHjTextField.setText(projectPath);
                String logPath = DOMUtils.getTextTrim(root, "log-path");
                GITLOGPATHjTextField.setText(logPath);
                String outputPath = DOMUtils.getTextTrim(root, "output-path");
                GITLOGOUTPUTjTextField.setText(outputPath);
                String projectType = DOMUtils.getTextTrim(root, "project-type");
                if (ProjectTypeEnum.MULTIMODULE.name().equals(projectType)) {
                    GITLOGPROJECTMUTILjRadioButton.setSelected(true);
                } else {
                    GITLOGPROJECTSINGLEjRadioButton.setSelected(true);
                }
                ((DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel()).setRowCount(0);
                Element sourceMappersElment = DOMUtils.getChildElement(root, "source-mappers");
                if (sourceMappersElment != null) {
                    List<Element> sourceMappers = DOMUtils.getChildElements(sourceMappersElment);
                    if (sourceMappers != null) {
                        for (int i = 0, j = sourceMappers.size(); i < j; i++) {
                            Element curr = sourceMappers.get(i);
                            String sourceDir = DOMUtils.getTextTrim(curr, "source-dir");
                            String targetDir = DOMUtils.getTextTrim(curr, "target-dir");
                            String patchDir = DOMUtils.getTextTrim(curr, "patch-dir");
                            ((DefaultTableModel) GITLOGSOURCEMAPPERjTable.getModel()).addRow(new String[]{sourceDir, targetDir, patchDir});
                        }
                    }
                }
                LOGGER.info("配置文件类型文件导入成功！");
            } else {
                LOGGER.error("配置文件类型文件gen-type、version-manager-type与当前类型不匹配！");
            }
        }
        if (StringUtils.isBlank(gitLogProjectConfig)) {
            gitLogProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_GITLOGPROJECTCONFIGjButtonActionPerformed

    /**
     * SVN日志增量-导入配置文件
     * @param evt
     */
    private void SVNLOGPROJECTCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SVNLOGPROJECTCONFIGjButtonActionPerformed
        String oldConfig = svnLogProjectConfig;
        if (StringUtils.isNotBlank(svnLogProjectConfig)) {
            svnLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, svnLogProjectConfig, "xml");
        } else {
            svnLogProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        LOGGER.info(svnLogProjectConfig);
        if (StringUtils.isNotBlank(svnLogProjectConfig)) {
            Document document = DOMUtils.getXMLByFilePath(svnLogProjectConfig);
            Element root = document.getRootElement();
            String genType = DOMUtils.getTextTrim(root, "gen-type");
            String versionManagerType = DOMUtils.getTextTrim(root, "version-manager-type");
            if (GenTypeEnum.LOG.name().equals(genType) && VersionManagerTypeEnum.SVN.name().equals(versionManagerType)) {
                String projectName = DOMUtils.getTextTrim(root, "project-name");
                SVNLOGPROJECTNAMEjTextField.setText(projectName);
                String projectPath = DOMUtils.getTextTrim(root, "project-path");
                SVNLOGPROJECTPATHjTextField.setText(projectPath);
                String logPath = DOMUtils.getTextTrim(root, "log-path");
                SVNLOGPATHjTextField.setText(logPath);
                String outputPath = DOMUtils.getTextTrim(root, "output-path");
                SVNLOGOUTPUTjTextField.setText(outputPath);
                String projectType = DOMUtils.getTextTrim(root, "project-type");
                if (ProjectTypeEnum.MULTIMODULE.name().equals(projectType)) {
                    SVNLOGPROJECTMUTILjRadioButton.setSelected(true);
                } else {
                    SVNLOGPROJECTSINGLEjRadioButton.setSelected(true);
                }
                ((DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel()).setRowCount(0);
                Element sourceMappersElment = DOMUtils.getChildElement(root, "source-mappers");
                if (sourceMappersElment != null) {
                    List<Element> sourceMappers = DOMUtils.getChildElements(sourceMappersElment);
                    if (sourceMappers != null) {
                        for (int i = 0, j = sourceMappers.size(); i < j; i++) {
                            Element curr = sourceMappers.get(i);
                            String sourceDir = DOMUtils.getTextTrim(curr, "source-dir");
                            String targetDir = DOMUtils.getTextTrim(curr, "target-dir");
                            String patchDir = DOMUtils.getTextTrim(curr, "patch-dir");
                            ((DefaultTableModel) SVNLOGSOURCEMAPPERjTable.getModel()).addRow(new String[]{sourceDir, targetDir, patchDir});
                        }
                    }
                }
                LOGGER.info("配置文件类型文件导入成功！");
            } else {
                LOGGER.error("配置文件类型文件gen-type、version-manager-type与当前类型不匹配！");
            }

        }
        if (StringUtils.isBlank(svnLogProjectConfig)) {
            svnLogProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_SVNLOGPROJECTCONFIGjButtonActionPerformed

    /**
     * 选择MVN POM分析输出目录
     * @param evt
     */
    private void MVNPOMANALYSISOUTPUTjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMANALYSISOUTPUTjButtonActionPerformed
        String mvnPomAnalysisOutput = MVNPOMANALYSISOUTPUTjTextField.getText();
        doJfileChooseAction(JFileChooser.DIRECTORIES_ONLY, MVNPOMANALYSISOUTPUTjTextField, mvnPomAnalysisOutput, null);
    }//GEN-LAST:event_MVNPOMANALYSISOUTPUTjButtonActionPerformed

    /**
     * MVN pom依赖分析打包
     * @param evt
     */
    private void MVNPOMANALYSISOUTPACKjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMANALYSISOUTPACKjButtonActionPerformed
        String analysisName = MVNPOMANALYSISNAMEjTextField.getText();
        String projectName = MVNPOMANALYSISNAMEPROJECTNAMEjTextField.getText();
        String pomNewPath = MVNPOMNEWPATHjTextField.getText();
        String pomOldPath = MVNPOMOLDPATHjTextField.getText();
        String outputPath = MVNPOMANALYSISOUTPUTjTextField.getText();
        if (StringUtils.isBlank(analysisName)) {
            LOGGER.error("分析名称为空");
            return;
        }
        if (StringUtils.isBlank(projectName)) {
            LOGGER.error("项目名称为空");
            return;
        }
        if (StringUtils.isBlank(pomNewPath)) {
            LOGGER.error("POM_NEW路径为空");
            return;
        }
        if (StringUtils.isBlank(pomOldPath)) {
            LOGGER.error("POM_OLD路径为空");
            return;
        }
        if (StringUtils.isBlank(outputPath)) {
            LOGGER.warn("输出路径为空,依赖分析包将放在打包工具所在目录");
        }
        AnalysisTypeEnum analysisType = AnalysisTypeEnum.COMPLETEANALYSISMODULE;
        if (MVNPOMDIFFANALYSISjRadioButton.isSelected()) {
            analysisType = AnalysisTypeEnum.DIFFANALYSISMODULE;
        }
        DependLevelEnum dependLevelEnum = DependLevelEnum.COMPILE;
        if (MVNPOMCOMPILEjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.COMPILE;
        } else if (MVNPOMTESTjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.TEST;
        } else if (MVNPOMRUNTIMEjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.RUNTIME;
        } else if (MVNPOMPROVIDEDjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.PROVIDED;
        } else {
            dependLevelEnum = DependLevelEnum.SYSTEM;
        }
        String dependLevel = dependLevelEnum.name().toLowerCase();
        //mvntest.bat D:\\SpringRooWorkSpace\\ump20170420_chery_pc E:\\apache-maven-3.5.3\\conf\\settings.xml E:\\mvntest\\lib
        String userDir = System.getProperty("user.dir");
        LOGGER.info("开始执行maven pom bat命令!工作目录：" + userDir);
        String dateFormatStr = DateUtil.formatDateStr(DateUtil.SHORT_SECOND);
        String FILE_SEPARATOR = System.getProperty("file.separator");
        if (StringUtils.isBlank(outputPath)) {
            outputPath = userDir;
        }
        LOGGER.info("请稍等片刻...");
        outputPath = outputPath + FILE_SEPARATOR + projectName + FILE_SEPARATOR + analysisName + FILE_SEPARATOR + dateFormatStr + FILE_SEPARATOR + "pomlib";
        String newOutputPath = outputPath + FILE_SEPARATOR + "new";
        String oldOutputPath = outputPath + FILE_SEPARATOR + "old";
        String diffOutputPath = outputPath + FILE_SEPARATOR + "diff";
        final AnalysisTypeEnum analysisTypeClone = analysisType;
        CyclicBarrier cyclicBarrier = new CyclicBarrier(2, new Runnable() {
            @Override
            public void run() {
                if (AnalysisTypeEnum.DIFFANALYSISMODULE.name().equals(analysisTypeClone.name())) {
                    LOGGER.info("POM依赖差异分析线程：" + Thread.currentThread().getName() + " is running...");
                    doMavenPomAnalysisDiffAction(newOutputPath, oldOutputPath, diffOutputPath, FILE_SEPARATOR);
                    LOGGER.info("POM依赖差异分析线程：" + Thread.currentThread().getName() + " is terminated.");
                }

            }
        });
        LOGGER.info("maven analysis doing.............");
        //path.replace("/", FILE_SEPARATOR).replace("\\", FILE_SEPARATOR);
        //分析new pom
        executor.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    LOGGER.info("new pom分析线程：" + Thread.currentThread().getName() + " is running...");
                    doMavenPomAnalysisAction(newOutputPath, pomNewPath, dependLevel, userDir);
                    LOGGER.info("new pom分析线程：" + Thread.currentThread().getName() + " is terminated.");
                    cyclicBarrier.await();

                } catch (InterruptedException | BrokenBarrierException e) {
                    LOGGER.error("new pom分析时出现错误", e);
                }
            }
        });
        //分析old pom
        executor.execute(new Runnable() {
            @Override
            public void run() {
                try {
                    LOGGER.info("old pom分析线程：" + Thread.currentThread().getName() + " is running...");
                    doMavenPomAnalysisAction(oldOutputPath, pomOldPath, dependLevel, userDir);
                    LOGGER.info("old pom分析线程：" + Thread.currentThread().getName() + " is terminated.");
                    cyclicBarrier.await();
                } catch (InterruptedException | BrokenBarrierException e) {
                    LOGGER.error("old pom分析时出现错误", e);
                }

            }
        });
    }//GEN-LAST:event_MVNPOMANALYSISOUTPACKjButtonActionPerformed

    /**
     * MVN POM分析配置文件保存
     * @param evt
     */
    private void MVNPOMANALYSISCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMANALYSISCONFIGjButtonActionPerformed
        String analysisName = MVNPOMANALYSISNAMEjTextField.getText();
        String projectName = MVNPOMANALYSISNAMEPROJECTNAMEjTextField.getText();
        String pomNewPath = MVNPOMNEWPATHjTextField.getText();
        String pomOldPath = MVNPOMOLDPATHjTextField.getText();
        String outputPath = MVNPOMANALYSISOUTPUTjTextField.getText();
        AnalysisTypeEnum analysisType = AnalysisTypeEnum.COMPLETEANALYSISMODULE;
        if (MVNPOMDIFFANALYSISjRadioButton.isSelected()) {
            analysisType = AnalysisTypeEnum.DIFFANALYSISMODULE;
        }
        DependLevelEnum dependLevelEnum = DependLevelEnum.COMPILE;
        if (MVNPOMCOMPILEjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.COMPILE;
        } else if (MVNPOMTESTjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.TEST;
        } else if (MVNPOMRUNTIMEjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.RUNTIME;
        } else if (MVNPOMPROVIDEDjRadioButton.isSelected()) {
            dependLevelEnum = DependLevelEnum.PROVIDED;
        } else {
            dependLevelEnum = DependLevelEnum.SYSTEM;
        }
        String oldConfig = MvnPomAnalysisProjectConfig;
        if (StringUtils.isNotBlank(MvnPomAnalysisProjectConfig)) {
            MvnPomAnalysisProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, MvnPomAnalysisProjectConfig, "xml");
        } else {
            MvnPomAnalysisProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }
        LOGGER.info(MvnPomAnalysisProjectConfig);
        if (MvnPomAnalysisProjectConfig != null) {
            XMLWriter xmlWriter = null;
            OutputStreamWriter out = null;
            BufferedWriter fileWriter = null;
            try {
                //DocumentHelper提供了创建Document对象的方法 
                Document document = DocumentHelper.createDocument();
                //添加节点信息 
                Element rootElement = document.addElement("patch-config");
                //这里可以继续添加子节点，也可以指定内容 
                //rootElement.setText("这个是module标签的文本信息");
                Element analysisNameElement = rootElement.addElement("analysis-name");
                analysisNameElement.setText(analysisName);
                Element projectNameElement = rootElement.addElement("project-name");
                projectNameElement.setText(projectName);
                Element pomNewPathElement = rootElement.addElement("pom-new-path");
                pomNewPathElement.setText(pomNewPath);
                Element pomOldPathElement = rootElement.addElement("pom-old-path");
                pomOldPathElement.setText(pomOldPath);
                Element outputPathElement = rootElement.addElement("output-path");
                outputPathElement.setText(outputPath);
                Element analysisTypeElement = rootElement.addElement("analysis-type");
                analysisTypeElement.setText(analysisType.name());
                Element dependLevelElement = rootElement.addElement("depend-level");
                dependLevelElement.setText(dependLevelEnum.name());
                //Writer fileWriter = new FileWriter(MvnPomAnalysisProjectConfig);
                out = new OutputStreamWriter(new FileOutputStream(MvnPomAnalysisProjectConfig), "UTF-8");
                fileWriter = new BufferedWriter(out);
                //设置文件编码  
                OutputFormat xmlFormat = new OutputFormat();
                xmlFormat.setEncoding("UTF-8");
                // 设置换行 
                xmlFormat.setNewlines(true);
                // 生成缩进 
                xmlFormat.setIndent(true);
                // 使用4个空格进行缩进, 可以兼容文本编辑器 
                xmlFormat.setIndent("    ");
                //dom4j提供了专门写入文件的对象XMLWriter 
                xmlWriter = new XMLWriter(fileWriter, xmlFormat);
                xmlWriter.write(document);
                xmlWriter.flush();
                LOGGER.info("MVN POM ANALYSIS保存配置文件保存成功！路径：{}", MvnPomAnalysisProjectConfig);
            } catch (IOException e) {
                LOGGER.error("MVN POM ANALYSIS保存配置文件异常", e);
            } finally {
                if (xmlWriter != null) {
                    try {
                        xmlWriter.close();
                    } catch (IOException ex) {
                        LOGGER.error("MVN POM ANALYSIS保存配置文件关闭流异常", ex);
                    }
                }
                if (fileWriter != null) {
                    try {
                        fileWriter.close();
                    } catch (IOException ex) {
                        LOGGER.error("MVN POM ANALYSIS保存配置文件关闭流异常", ex);
                    }
                }
                if (out != null) {
                    try {
                        out.close();
                    } catch (IOException ex) {
                        LOGGER.error("MVN POM ANALYSIS保存配置文件关闭流异常", ex);
                    }
                }
            }
        }
        if (StringUtils.isBlank(MvnPomAnalysisProjectConfig)) {
            MvnPomAnalysisProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_MVNPOMANALYSISCONFIGjButtonActionPerformed

    /**
     * 导入Maven pom依赖分析配置文件
     * @param evt
     */
    private void MVNPOMANALYSISCTCONFIGjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMANALYSISCTCONFIGjButtonActionPerformed
        // TODO add your handling code here:
        String oldConfig = MvnPomAnalysisProjectConfig;
        if (StringUtils.isNotBlank(MvnPomAnalysisProjectConfig)) {
            MvnPomAnalysisProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, MvnPomAnalysisProjectConfig, "xml");
        } else {
            MvnPomAnalysisProjectConfig = doJfileChooseAction(JFileChooser.FILES_ONLY, null, null, "xml");
        }

        LOGGER.info(MvnPomAnalysisProjectConfig);
        if (StringUtils.isNotBlank(MvnPomAnalysisProjectConfig)) {
            Document document = DOMUtils.getXMLByFilePath(MvnPomAnalysisProjectConfig);
            Element root = document.getRootElement();
            String analysisType = DOMUtils.getTextTrim(root, "analysis-type");
            if (AnalysisTypeEnum.COMPLETEANALYSISMODULE.name().equals(analysisType) || AnalysisTypeEnum.DIFFANALYSISMODULE.name().equals(analysisType)) {
                String analysisName = DOMUtils.getTextTrim(root, "analysis-name");
                String projectName = DOMUtils.getTextTrim(root, "project-name");
                String pomNewPath = DOMUtils.getTextTrim(root, "pom-new-path");
                String pomOldPath = DOMUtils.getTextTrim(root, "pom-old-path");
                String outputPath = DOMUtils.getTextTrim(root, "output-path");
                String dependLevel = DOMUtils.getTextTrim(root, "depend-level");
                MVNPOMANALYSISNAMEjTextField.setText(analysisName);
                MVNPOMANALYSISNAMEPROJECTNAMEjTextField.setText(projectName);
                MVNPOMNEWPATHjTextField.setText(pomNewPath);
                MVNPOMOLDPATHjTextField.setText(pomOldPath);
                MVNPOMANALYSISOUTPUTjTextField.setText(outputPath);
                if (AnalysisTypeEnum.DIFFANALYSISMODULE.name().equals(analysisType)) {
                    MVNPOMDIFFANALYSISjRadioButton.setSelected(true);
                } else {
                    MVNPOMCOMPLETEANALYSISjRadioButton.setSelected(true);
                }
                if (DependLevelEnum.COMPILE.name().equals(dependLevel)) {
                    MVNPOMCOMPILEjRadioButton.setSelected(true);
                } else if (DependLevelEnum.TEST.name().equals(dependLevel)) {
                    MVNPOMTESTjRadioButton.setSelected(true);
                } else if (DependLevelEnum.RUNTIME.name().equals(dependLevel)) {
                    MVNPOMRUNTIMEjRadioButton.setSelected(true);
                } else if (DependLevelEnum.PROVIDED.name().equals(dependLevel)) {
                    MVNPOMPROVIDEDjRadioButton.setSelected(true);
                } else {
                    MVNPOMSYSTEMjRadioButton.setSelected(true);
                }
                LOGGER.info("配置文件类型文件导入成功！");
            } else {
                LOGGER.error("配置文件类型文件analysis-type与当前类型不匹配！");
            }
        }
        if (StringUtils.isBlank(MvnPomAnalysisProjectConfig)) {
            MvnPomAnalysisProjectConfig = oldConfig;
        }
    }//GEN-LAST:event_MVNPOMANALYSISCTCONFIGjButtonActionPerformed

    /**
     * 选择pom.xml老路径
     * @param evt
     */
    private void MVNPOMOLDPATHjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMOLDPATHjButtonActionPerformed
        // TODO add your handling code here:
        String oldPomPath = MVNPOMOLDPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.FILES_ONLY, MVNPOMOLDPATHjTextField, oldPomPath, "xml");
    }//GEN-LAST:event_MVNPOMOLDPATHjButtonActionPerformed

    /**
     * 选择pom.xml新路径
     * @param evt
     */
    private void MVNPOMNEWPATHjButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MVNPOMNEWPATHjButtonActionPerformed
        // TODO add your handling code here:
        String newPomPath = MVNPOMNEWPATHjTextField.getText();
        doJfileChooseAction(JFileChooser.FILES_ONLY, MVNPOMNEWPATHjTextField, newPomPath, "xml");
    }//GEN-LAST:event_MVNPOMNEWPATHjButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GeneratorMainJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame mainJFrame = new GeneratorMainJFrame();
                MainFrameConsoleUtil.initConsole(((GeneratorMainJFrame) mainJFrame).CONSOLEtextArea, ((GeneratorMainJFrame) mainJFrame).globalConsolejTextPane);
                Dimension screen = Toolkit.getDefaultToolkit().getScreenSize();
                //设置软件图标
                URL url = GeneratorMainJFrame.class.getResource("/patch_desk.png");
                ImageIcon icon = new ImageIcon(url);
                //mainJFrame.setIconImage(Toolkit.getDefaultToolkit().getImage("patch_desk.png"));
                mainJFrame.setIconImage(icon.getImage());
                mainJFrame.setLocation((screen.width - mainJFrame.getSize().width) / 2, (screen.height - mainJFrame.getSize().height) / 2);//使启动窗口居中显示
                mainJFrame.setVisible(true);
            }
        });
    }

    /**
     * @param jFileChooserType FILES_ONLY = 0| DIRECTORIES_ONLY =
     *                         1|FILES_AND_DIRECTORIES = 2
     * @param jTextField
     */
    private String doJfileChooseAction(int jFileChooserType, JTextField jTextField, String configPath, String fileSuffix) {
        globaljFileChooser.setFileSelectionMode(jFileChooserType);//只能选择目录
        globaljFileChooser.resetChoosableFileFilters();
//        globaljFileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        //globaljFileChooser.showDialog(new JLabel(), "选择");
        globaljFileChooser.setApproveButtonText("保存");
        globaljFileChooser.setDialogTitle("选择");
        if (StringUtils.isNotBlank(fileSuffix)) {
            globaljFileChooser.setFileFilter(new FileSuffixFilter(fileSuffix));
        }
        if (StringUtils.isNotBlank(configPath)) {
            File confPath = new File(configPath);
            if (confPath.isDirectory()) {
                globaljFileChooser.setCurrentDirectory(confPath);
            } else if (confPath.isFile()) {
                globaljFileChooser.setSelectedFile(confPath);
            }
        } else {
            globaljFileChooser.setSelectedFile(null);
        }
//int i = globaljFileChooser.showDialog(new JLabel("选择"), "保存");
        //int i = globaljFileChooser.showOpenDialog(null);
        int i = globaljFileChooser.showSaveDialog(this);

        String path = null;
        if (i == JFileChooser.APPROVE_OPTION) { //打开文件
            path = globaljFileChooser.getSelectedFile().getAbsolutePath();
            String name = globaljFileChooser.getSelectedFile().getName();
            LOGGER.info("当前文件路径：" + path + ";当前文件名：" + name);
            if (jTextField != null) {
                jTextField.setText(path);
            }
        } else {
            LOGGER.info("没有选中文件");
        }
        return path;
    }

    JFileChooser globaljFileChooser = new JFileChooser();
    private static final Logger LOGGER = LoggerFactory.getLogger(GeneratorMainJFrame.class);
    private String svnLogProjectConfig = null;
    private String svnServerProjectConfig = null;
    private String gitLogProjectConfig = null;
    private String gitServerProjectConfig = null;
    private String MvnPomAnalysisProjectConfig = null;
    private ExecutorService executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JLabel CONSOLEjLabel;
    private TextArea CONSOLEtextArea;
    private JButton GITLOGADDjButton;
    private JButton GITLOGDELjButton;
    private JButton GITLOGOUTPACKjButton;
    private JButton GITLOGOUTPUTjButton;
    private JLabel GITLOGOUTPUTjLabel;
    private JTextField GITLOGOUTPUTjTextField;
    private JButton GITLOGPATHjButton;
    private JLabel GITLOGPATHjLabel;
    private JTextField GITLOGPATHjTextField;
    private JButton GITLOGPROJECTCONFIGjButton;
    private JRadioButton GITLOGPROJECTMUTILjRadioButton;
    private JLabel GITLOGPROJECTNAMEjLabel;
    private JTextField GITLOGPROJECTNAMEjTextField;
    private JTextField GITLOGPROJECTPATHjTextField;
    private JRadioButton GITLOGPROJECTSINGLEjRadioButton;
    private ButtonGroup GITLOGPROJECTTYPEbuttonGroup;
    private JLabel GITLOGPROJECTTYPEjLabel;
    private JButton GITLOGPROJECTjButton;
    private JLabel GITLOGPROJECTjLabel;
    private JButton GITLOGSAVECONFIGjButton;
    private JTable GITLOGSOURCEMAPPERjTable;
    private JScrollPane GITLOGTABELjScrollPane;
    private JPanel GITLOGjPanel;
    private JScrollPane GITLOGjScrollPane;
    private JButton GITSERVERADDjButton;
    private JButton GITSERVERDELjButton;
    private JButton GITSERVEROUTPACKjButton;
    private JButton GITSERVEROUTPUTjButton;
    private JLabel GITSERVEROUTPUTjLabel;
    private JTextField GITSERVEROUTPUTjTextField;
    private JButton GITSERVERPATHjButton;
    private JLabel GITSERVERPATHjLabel;
    private JTextField GITSERVERPATHjTextField;
    private JButton GITSERVERPROJECTCONFIGjButton;
    private JRadioButton GITSERVERPROJECTMUTILjRadioButton;
    private JLabel GITSERVERPROJECTNAMEjLabel;
    private JTextField GITSERVERPROJECTNAMEjTextField;
    private JTextField GITSERVERPROJECTPATHjTextField;
    private JRadioButton GITSERVERPROJECTSINGLEjRadioButton;
    private ButtonGroup GITSERVERPROJECTTYPEbuttonGroup;
    private JLabel GITSERVERPROJECTTYPEjLabel;
    private JButton GITSERVERPROJECTjButton;
    private JLabel GITSERVERPROJECTjLabel;
    private JButton GITSERVERSAVECONFIGjButton;
    private JTable GITSERVERSOURCEMAPPERjTable;
    private JScrollPane GITSERVERTABELjScrollPane;
    private JLabel GITSERVERVERSIONCENTERjLabel;
    private JTextField GITSERVERVERSIONENDjTextField;
    private JTextField GITSERVERVERSIONSTARTjTextField;
    private JLabel GITSERVERVERSIONjLabel;
    private JPanel GITSERVERjPanel;
    private JScrollPane GITSERVERjScrollPane;
    private JButton MVNPOMANALYSISCONFIGjButton;
    private JButton MVNPOMANALYSISCTCONFIGjButton;
    private JLabel MVNPOMANALYSISNAMEPROJECTNAMEjLabel;
    private JTextField MVNPOMANALYSISNAMEPROJECTNAMEjTextField;
    private JLabel MVNPOMANALYSISNAMEjLabel;
    private JTextField MVNPOMANALYSISNAMEjTextField;
    private JButton MVNPOMANALYSISOUTPACKjButton;
    private JButton MVNPOMANALYSISOUTPUTjButton;
    private JLabel MVNPOMANALYSISOUTPUTjLabel;
    private JTextField MVNPOMANALYSISOUTPUTjTextField;
    private JLabel MVNPOMANALYSISTYPEjLabel1;
    private ButtonGroup MVNPOMANALYSISbuttonGroup;
    private JPanel MVNPOMANALYSISjPanel;
    private JRadioButton MVNPOMCOMPILEjRadioButton;
    private JRadioButton MVNPOMCOMPLETEANALYSISjRadioButton;
    private ButtonGroup MVNPOMDEPENDLEVELbuttonGroup;
    private JLabel MVNPOMDEPENDLEVELjLabel;
    private JRadioButton MVNPOMDIFFANALYSISjRadioButton;
    private JButton MVNPOMNEWPATHjButton;
    private JLabel MVNPOMNEWPATHjLabel;
    private JTextField MVNPOMNEWPATHjTextField;
    private JButton MVNPOMOLDPATHjButton;
    private JLabel MVNPOMOLDPATHjLabel;
    private JTextField MVNPOMOLDPATHjTextField;
    private JRadioButton MVNPOMPROVIDEDjRadioButton;
    private JRadioButton MVNPOMRUNTIMEjRadioButton;
    private JRadioButton MVNPOMSYSTEMjRadioButton;
    private JRadioButton MVNPOMTESTjRadioButton;
    private JScrollPane MVNjScrollPane;
    private JScrollPane readmejScrollPane;
    private JLabel PROJECTADDRESSjLabel;
    private JTabbedPane PatchjTabbedPane;
    private JButton SVNLOGADDjButton;
    private JButton SVNLOGDELjButton;
    private JButton SVNLOGOUTPACKjButton;
    private JButton SVNLOGOUTPUTjButton;
    private JLabel SVNLOGOUTPUTjLabel;
    private JTextField SVNLOGOUTPUTjTextField;
    private JButton SVNLOGPATHjButton;
    private JLabel SVNLOGPATHjLabel;
    private JTextField SVNLOGPATHjTextField;
    private JButton SVNLOGPROJECTCONFIGjButton;
    private JRadioButton SVNLOGPROJECTMUTILjRadioButton;
    private JLabel SVNLOGPROJECTNAMEjLabel;
    private JTextField SVNLOGPROJECTNAMEjTextField;
    private JTextField SVNLOGPROJECTPATHjTextField;
    private JRadioButton SVNLOGPROJECTSINGLEjRadioButton;
    private ButtonGroup SVNLOGPROJECTTYPEbuttonGroup;
    private JLabel SVNLOGPROJECTTYPEjLabel;
    private JButton SVNLOGPROJECTjButton;
    private JLabel SVNLOGPROJECTjLabel;
    private JButton SVNLOGSAVECONFIGjButton;
    private JTable SVNLOGSOURCEMAPPERjTable;
    private JScrollPane SVNLOGTABELjScrollPane;
    private JPanel SVNLOGjPanel;
    private JScrollPane SVNLOGjScrollPane;
    private JLabel SVNSERVERACOUNTjLabel;
    private JTextField SVNSERVERACOUNTjTextField;
    private JButton SVNSERVERADDjButton;
    private JButton SVNSERVERDELjButton;
    private JLabel SVNSERVEREXCLUDEjLabel;
    private JTextField SVNSERVEREXCLUDEjTextField;
    private JButton SVNSERVEROUTPACKjButton;
    private JButton SVNSERVEROUTPUTjButton;
    private JLabel SVNSERVEROUTPUTjLabel;
    private JTextField SVNSERVEROUTPUTjTextField;
    private JLabel SVNSERVERPATHjLabel;
    private JTextField SVNSERVERPATHjTextField;
    private JButton SVNSERVERPROJECTCONFIGjButton;
    private JRadioButton SVNSERVERPROJECTMUTILjRadioButton;
    private JLabel SVNSERVERPROJECTNAMEjLabel;
    private JTextField SVNSERVERPROJECTNAMEjTextField;
    private JTextField SVNSERVERPROJECTPATHjTextField;
    private JRadioButton SVNSERVERPROJECTSINGLEjRadioButton;
    private ButtonGroup SVNSERVERPROJECTTYPEbuttonGroup;
    private JLabel SVNSERVERPROJECTTYPEjLabel;
    private JButton SVNSERVERPROJECTjButton;
    private JLabel SVNSERVERPROJECTjLabel;
    private JLabel SVNSERVERPWDjLabel;
    private JPasswordField SVNSERVERPWDjPasswordField;
    private JLabel SVNSERVERREVISEPATHjLabel;
    private JTextField SVNSERVERREVISEjTextField;
    private JButton SVNSERVERSAVECONFIGjButton;
    private JTable SVNSERVERSOURCEMAPPERjTable;
    private JScrollPane SVNSERVERTABELjScrollPane;
    private JLabel SVNSERVERVERSIONCENTERjLabel;
    private JTextField SVNSERVERVERSIONENDjTextField;
    private JTextField SVNSERVERVERSIONSTARTjTextField;
    private JLabel SVNSERVERVERSIONjLabel;
    private JPanel SVNSERVERjPanel;
    private JScrollPane SVNSERVERjScrollPane;
    private JButton globalConsoleClearjButton;
    private JScrollPane globalConsolejScrollPane;
    private JTextPane globalConsolejTextPane;
    // End of variables declaration//GEN-END:variables

    /**
     * maven pom analysis依赖包差异分析
     * @param newOutputPath
     * @param oldOutputPath
     * @param diffOutputPath
     * @param fileSeparator
     */
    private void doMavenPomAnalysisDiffAction(String newOutputPath, String oldOutputPath, String diffOutputPath, String fileSeparator) {
        File diffOutputPathFile = new File(diffOutputPath);
        if (!diffOutputPathFile.exists()) {
            diffOutputPathFile.mkdirs();
        }
        File diffAddOutputPathFile = new File(diffOutputPath + fileSeparator + "add");
        File diffRemoveOutputPathFile = new File(diffOutputPath + fileSeparator + "remove");
        if (!diffAddOutputPathFile.exists()) {
            diffAddOutputPathFile.mkdirs();
        }
        if (!diffRemoveOutputPathFile.exists()) {
            diffRemoveOutputPathFile.mkdirs();
        }
        File newFsPath = new File(newOutputPath);
        File[] newFsArr = newFsPath.listFiles();
        ArrayList<String> newFsList = new ArrayList<String>();
        for (File f : newFsArr) {
            newFsList.add(f.getName());
        }
        File oldFsPath = new File(oldOutputPath);
        File[] oldFsArr = oldFsPath.listFiles();
        ArrayList<String> oldFsList = new ArrayList<String>();
        for (File f : oldFsArr) {
            oldFsList.add(f.getName());
        }
        // 集合相减  
        ArrayList<String> addSubtractList = (ArrayList<String>) CollectionUtils.subtract(newFsList, oldFsList);
        // 集合相减  
        ArrayList<String> minusSubtractList = (ArrayList<String>) CollectionUtils.subtract(oldFsList, newFsList);
        for (int i = 0; i < newFsArr.length; ++i) {
            if (addSubtractList.contains(newFsArr[i].getName())) {
                if (newFsArr[i].isFile()) {
                    final File newFsFile = newFsArr[i];
                    String name = newFsFile.getName();
                    final File newFile = new File(diffOutputPath + fileSeparator + "add" + fileSeparator + name);
                    if (!newFile.exists()) {
                        try {
                            System.out.println(newFile);
                            newFile.createNewFile();
                            executor.execute(new Runnable() {
                                @Override
                                public void run() {
                                    try {
                                        FileUtil.fileChannelCopy(newFsFile, newFile);
                                    } catch (IOException e) {
                                        LOGGER.error("MVN POM依赖差异分析打包流信息处理add异常", e);
                                    }
                                }
                            });

                        } catch (IOException e) {
                            LOGGER.error("MVN POM依赖差异分析打包流信息处理add异常", e);
                        }
                    }
                }
            }
        }
        for (int i = 0; i < oldFsArr.length; ++i) {
            if (minusSubtractList.contains(oldFsArr[i].getName())) {
                if (oldFsArr[i].isFile()) {
                    final File oldFsFile = oldFsArr[i];
                    String name = oldFsFile.getName();
                    final File newFile = new File(diffOutputPath + fileSeparator + "remove" + fileSeparator + name);
                    if (!newFile.exists()) {
                        try {
                            System.out.println(newFile);
                            newFile.createNewFile();
                            executor.execute(new Runnable() {
                                @Override
                                public void run() {
                                    try {
                                        FileUtil.fileChannelCopy(oldFsFile, newFile);
                                    } catch (IOException e) {
                                        LOGGER.error("MVN POM依赖差异分析打包流信息处理remove异常", e);
                                    }
                                }
                            });
                        } catch (IOException e) {
                            LOGGER.error("MVN POM依赖差异分析打包流信息处理remove异常", e);
                        }
                    }
                }
            }
        }

    }

    /**
     * maven pom analysis依赖包分析
     * @param outputPath
     * @param pomPath
     * @param dependLevel
     * @param userDir
     */
    private void doMavenPomAnalysisAction(String outputPath, String pomPath, String dependLevel, String userDir) {
        Process child = null;
        InputStream in = null;
        try {
            child = child = Runtime.getRuntime().exec(
                    "cmd /c  start /b " + userDir + "\\mvn_analysis.bat  " + pomPath + "  " + outputPath + "  " + dependLevel);
            StreamGobblerHandle errorGobbler = new StreamGobblerHandle(child.getErrorStream(), "Error");
            StreamGobblerHandle outputGobbler = new StreamGobblerHandle(child.getInputStream(), "Output");
            List<Future> tasks = new ArrayList<Future>();
            tasks.add(executor.submit(errorGobbler));
            tasks.add(executor.submit(outputGobbler));
            for (Future task : tasks) {
                try {
                    if (task.get() != null) {
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    LOGGER.error("MVN POM依赖分析打包流信息处理异常", ex);
                }
            }
            child.waitFor();
            int i = child.exitValue();
            if (i == 0) {
                LOGGER.info("执行maven pom bat命令完成!");
            } else {
                LOGGER.info("执行maven pom bat命令失败!");
            }
        } catch (IOException | InterruptedException ex) {
            LOGGER.error("MVN POM依赖分析打包异常", ex);
        } finally {
            if (child != null) {
                //child.destroy();  //销毁子进程
            }
            if (in != null) {
                try {
                    in.close();
                } catch (IOException ex) {
                    LOGGER.error("关闭文件流异常", ex);
                }
            }
        }
    }
}

class FileSuffixFilter extends FileFilter {

    private final static String DESCRIPTION = "FILESUFFIX";
    private String fileSuffix = "xml";

    public FileSuffixFilter() {
    }

    public FileSuffixFilter(String fileSuffix) {
        this.fileSuffix = fileSuffix;
    }

    @Override
    public boolean accept(File f) {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        boolean result = true;
        if (!f.isDirectory()) {
            String fileName = f.getName();
            String suffix = fileName.substring(fileName.lastIndexOf(".") + 1);
            result = fileSuffix.equals(suffix);
        }
        return result;
    }

    @Override
    public String getDescription() {
        //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
        return DESCRIPTION;
    }
};
